{\rtf1\adeflang1025\ansi\ansicpg1252\uc1\adeff0\deff0\stshfdbch31505\stshfloch31506\stshfhich31506\stshfbi31507\deflang1033\deflangfe1033\themelang1033\themelangfe0\themelangcs0{\fonttbl{\f0\fbidi \froman\fcharset204\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f2\fbidi \fmodern\fcharset204\fprq1{\*\panose 02070309020205020404}Courier New;}{\f34\fbidi \froman\fcharset204\fprq2{\*\panose 02040503050406030204}Cambria Math;}{\f38\fbidi \fswiss\fcharset204\fprq2{\*\panose 020b0604030504040204}Tahoma;}
{\flomajor\f31500\fbidi \froman\fcharset204\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fdbmajor\f31501\fbidi \froman\fcharset204\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fhimajor\f31502\fbidi \froman\fcharset204\fprq2{\*\panose 02040503050406030204}Cambria;}{\fbimajor\f31503\fbidi \froman\fcharset204\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\flominor\f31504\fbidi \froman\fcharset204\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fdbminor\f31505\fbidi \froman\fcharset204\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fhiminor\f31506\fbidi \fswiss\fcharset204\fprq2{\*\panose 020f0502020204030204}Calibri;}{\fbiminor\f31507\fbidi \froman\fcharset204\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f279\fbidi \froman\fcharset0\fprq2 Times New Roman;}
{\f277\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\f280\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\f281\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\f282\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\f283\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f284\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\f285\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f299\fbidi \fmodern\fcharset0\fprq1 Courier New;}
{\f297\fbidi \fmodern\fcharset238\fprq1 Courier New CE;}{\f300\fbidi \fmodern\fcharset161\fprq1 Courier New Greek;}{\f301\fbidi \fmodern\fcharset162\fprq1 Courier New Tur;}{\f302\fbidi \fmodern\fcharset177\fprq1 Courier New (Hebrew);}
{\f303\fbidi \fmodern\fcharset178\fprq1 Courier New (Arabic);}{\f304\fbidi \fmodern\fcharset186\fprq1 Courier New Baltic;}{\f305\fbidi \fmodern\fcharset163\fprq1 Courier New (Vietnamese);}{\f619\fbidi \froman\fcharset0\fprq2 Cambria Math;}
{\f617\fbidi \froman\fcharset238\fprq2 Cambria Math CE;}{\f620\fbidi \froman\fcharset161\fprq2 Cambria Math Greek;}{\f621\fbidi \froman\fcharset162\fprq2 Cambria Math Tur;}{\f624\fbidi \froman\fcharset186\fprq2 Cambria Math Baltic;}
{\f625\fbidi \froman\fcharset163\fprq2 Cambria Math (Vietnamese);}{\f659\fbidi \fswiss\fcharset0\fprq2 Tahoma;}{\f657\fbidi \fswiss\fcharset238\fprq2 Tahoma CE;}{\f660\fbidi \fswiss\fcharset161\fprq2 Tahoma Greek;}
{\f661\fbidi \fswiss\fcharset162\fprq2 Tahoma Tur;}{\f662\fbidi \fswiss\fcharset177\fprq2 Tahoma (Hebrew);}{\f663\fbidi \fswiss\fcharset178\fprq2 Tahoma (Arabic);}{\f664\fbidi \fswiss\fcharset186\fprq2 Tahoma Baltic;}
{\f665\fbidi \fswiss\fcharset163\fprq2 Tahoma (Vietnamese);}{\f666\fbidi \fswiss\fcharset222\fprq2 Tahoma (Thai);}{\flomajor\f31510\fbidi \froman\fcharset0\fprq2 Times New Roman;}{\flomajor\f31508\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\flomajor\f31511\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flomajor\f31512\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\flomajor\f31513\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\flomajor\f31514\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flomajor\f31515\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\flomajor\f31516\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fdbmajor\f31520\fbidi \froman\fcharset0\fprq2 Times New Roman;}{\fdbmajor\f31518\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fdbmajor\f31521\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}
{\fdbmajor\f31522\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fdbmajor\f31523\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fdbmajor\f31524\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\fdbmajor\f31525\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fdbmajor\f31526\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fhimajor\f31530\fbidi \froman\fcharset0\fprq2 Cambria;}
{\fhimajor\f31528\fbidi \froman\fcharset238\fprq2 Cambria CE;}{\fhimajor\f31531\fbidi \froman\fcharset161\fprq2 Cambria Greek;}{\fhimajor\f31532\fbidi \froman\fcharset162\fprq2 Cambria Tur;}
{\fhimajor\f31535\fbidi \froman\fcharset186\fprq2 Cambria Baltic;}{\fhimajor\f31536\fbidi \froman\fcharset163\fprq2 Cambria (Vietnamese);}{\fbimajor\f31540\fbidi \froman\fcharset0\fprq2 Times New Roman;}
{\fbimajor\f31538\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fbimajor\f31541\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbimajor\f31542\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\fbimajor\f31543\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fbimajor\f31544\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbimajor\f31545\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\fbimajor\f31546\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\flominor\f31550\fbidi \froman\fcharset0\fprq2 Times New Roman;}{\flominor\f31548\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\flominor\f31551\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flominor\f31552\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\flominor\f31553\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\flominor\f31554\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flominor\f31555\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\flominor\f31556\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fdbminor\f31560\fbidi \froman\fcharset0\fprq2 Times New Roman;}{\fdbminor\f31558\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fdbminor\f31561\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}
{\fdbminor\f31562\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fdbminor\f31563\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fdbminor\f31564\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\fdbminor\f31565\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fdbminor\f31566\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fhiminor\f31570\fbidi \fswiss\fcharset0\fprq2 Calibri;}
{\fhiminor\f31568\fbidi \fswiss\fcharset238\fprq2 Calibri CE;}{\fhiminor\f31571\fbidi \fswiss\fcharset161\fprq2 Calibri Greek;}{\fhiminor\f31572\fbidi \fswiss\fcharset162\fprq2 Calibri Tur;}
{\fhiminor\f31575\fbidi \fswiss\fcharset186\fprq2 Calibri Baltic;}{\fhiminor\f31576\fbidi \fswiss\fcharset163\fprq2 Calibri (Vietnamese);}{\fbiminor\f31580\fbidi \froman\fcharset0\fprq2 Times New Roman;}
{\fbiminor\f31578\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fbiminor\f31581\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbiminor\f31582\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\fbiminor\f31583\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fbiminor\f31584\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbiminor\f31585\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\fbiminor\f31586\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;
\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\ctextone\ctint255\cshade255\red0\green0\blue0;}
{\*\defchp \fs22\loch\af31506\hich\af31506\dbch\af31505 }{\*\defpap \ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 }\noqfpromote {\stylesheet{
\qj \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \snext0 \sqformat \spriority0 Normal;}{
\s1\ql \li0\ri0\sb240\sa120\keepn\nowidctlpar\wrapdefault\faauto\outlinelevel0\rin0\lin0\itap0 \rtlch\fcs1 \ab\af0\afs40\alang1025 \ltrch\fcs0 \b\fs40\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 
\sbasedon0 \snext0 \slink16 \sqformat heading 1;}{\s2\ql \li0\ri0\sb240\sa120\keepn\nowidctlpar\wrapdefault\faauto\outlinelevel1\rin0\lin0\itap0 \rtlch\fcs1 \ab\af0\afs32\alang1025 \ltrch\fcs0 
\b\fs32\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext0 \slink17 \sqformat heading 2;}{\s3\ql \li0\ri0\sb240\sa120\keepn\nowidctlpar\wrapdefault\faauto\outlinelevel2\rin0\lin0\itap0 \rtlch\fcs1 
\ab\af0\afs32\alang1025 \ltrch\fcs0 \b\fs32\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext0 \slink18 \sqformat heading 3;}{
\s4\ql \li0\ri0\sb240\sa120\keepn\nowidctlpar\wrapdefault\faauto\outlinelevel3\rin0\lin0\itap0 \rtlch\fcs1 \ab\af0\afs24\alang1025 \ltrch\fcs0 \b\fs24\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 
\sbasedon0 \snext0 \slink19 \sqformat heading 4;}{\s5\ql \li0\ri0\sb240\sa120\keepn\nowidctlpar\wrapdefault\faauto\outlinelevel4\rin0\lin0\itap0 \rtlch\fcs1 \ab\af0\afs24\alang1025 \ltrch\fcs0 
\b\fs24\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext0 \slink20 \sqformat heading 5;}{\s6\ql \li0\ri0\sb240\sa120\keepn\nowidctlpar\wrapdefault\faauto\outlinelevel5\rin0\lin0\itap0 \rtlch\fcs1 
\ab\af0\afs24\alang1025 \ltrch\fcs0 \b\fs24\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext0 \slink21 \sqformat heading 6;}{\*\cs10 \additive \ssemihidden Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tblind0\tblindtype3\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv \ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 \fs22\lang1033\langfe1033\loch\f31506\hich\af31506\dbch\af31505\cgrid\langnp1033\langfenp1033 \snext11 \ssemihidden \sunhideused 
Normal Table;}{\s15\qc \li0\ri0\sb240\sa120\keepn\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \ab\af0\afs40\alang1025 \ltrch\fcs0 \b\fs40\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 
\sbasedon0 \snext0 Part;}{\*\cs16 \additive \rtlch\fcs1 \ab\af31503\afs32 \ltrch\fcs0 \b\fs32\lang1024\langfe1024\kerning32\loch\f31502\hich\af31502\dbch\af31501\noproof \sbasedon10 \slink1 \slocked \spriority9 Heading 1 Char;}{\*\cs17 \additive 
\rtlch\fcs1 \ab\ai\af31503\afs28 \ltrch\fcs0 \b\i\fs28\lang1024\langfe1024\loch\f31502\hich\af31502\dbch\af31501\noproof \sbasedon10 \slink2 \slocked \ssemihidden \spriority9 Heading 2 Char;}{\*\cs18 \additive \rtlch\fcs1 \ab\af31503\afs26 \ltrch\fcs0 
\b\fs26\lang1024\langfe1024\loch\f31502\hich\af31502\dbch\af31501\noproof \sbasedon10 \slink3 \slocked \ssemihidden \spriority9 Heading 3 Char;}{\*\cs19 \additive \rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\fs28\lang1024\langfe1024\noproof 
\sbasedon10 \slink4 \slocked \ssemihidden \spriority9 Heading 4 Char;}{\*\cs20 \additive \rtlch\fcs1 \ab\ai\af0\afs26 \ltrch\fcs0 \b\i\fs26\lang1024\langfe1024\noproof \sbasedon10 \slink5 \slocked \ssemihidden \spriority9 Heading 5 Char;}{\*\cs21 
\additive \rtlch\fcs1 \ab\af0 \ltrch\fcs0 \b\lang1024\langfe1024\noproof \sbasedon10 \slink6 \slocked \ssemihidden \spriority9 Heading 6 Char;}{\s22\qr \li0\ri0\sb120\sa120\keep\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 
\af0\afs24\alang1025 \ltrch\fcs0 \fs24\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext22 rightpar;}{\s23\qc \li0\ri0\sb120\sa120\keep\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 
\af0\afs24\alang1025 \ltrch\fcs0 \fs24\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext23 centerpar;}{\s24\ql \li0\ri0\sb120\sa120\keep\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 
\af0\afs24\alang1025 \ltrch\fcs0 \fs24\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext0 equation;}{\s25\ql \li0\ri0\sb120\sa120\keep\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 
\af0\afs24\alang1025 \ltrch\fcs0 \fs24\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext0 equationNum;}{\s26\ql \li0\ri0\sb120\sa120\keep\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 
\af0\afs24\alang1025 \ltrch\fcs0 \fs24\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext0 equationAlign;}{\s27\ql \li0\ri0\sb120\sa120\keep\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 
\af0\afs24\alang1025 \ltrch\fcs0 \fs24\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext0 equationAlignNum;}{\s28\ql \li0\ri0\sb120\sa120\keep\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 
\rtlch\fcs1 \af0\afs24\alang1025 \ltrch\fcs0 \fs24\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext0 equationArray;}{\s29\ql \li0\ri0\sb120\sa120\keep\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 
\rtlch\fcs1 \af0\afs24\alang1025 \ltrch\fcs0 \fs24\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext0 equationArrayNum;}{
\s30\ql \li0\ri0\sb120\sa120\keep\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext0 theorem;}{
\s31\ql \li0\ri0\sb120\sa120\keep\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs24\alang1025 \ltrch\fcs0 \fs24\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext0 bitmapCenter;}{
\s32\qc \li0\ri0\sb240\sa240\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \ab\af0\afs36\alang1025 \ltrch\fcs0 \b\fs36\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 
\sbasedon0 \snext34 \slink33 \sqformat Title;}{\*\cs33 \additive \rtlch\fcs1 \ab\af31503\afs32 \ltrch\fcs0 \b\fs32\lang1024\langfe1024\kerning28\loch\f31502\hich\af31502\dbch\af31501\noproof \sbasedon10 \slink32 \slocked \spriority10 Title Char;}{
\s34\qc \li0\ri0\sa120\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext0 author;}{
\s35\ql \li0\ri0\nowidctlpar\tqc\tx4536\tqr\tx9072\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext35 \slink36 
footer;}{\*\cs36 \additive \rtlch\fcs1 \af0\afs20 \ltrch\fcs0 \f0\fs20\lang1024\langfe1024\noproof \sbasedon10 \slink35 \slocked \ssemihidden Footer Char;}{\s37\ql \li0\ri0\nowidctlpar\tqc\tx4536\tqr\tx9072\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 
\af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext37 \slink38 header;}{\*\cs38 \additive \rtlch\fcs1 \af0\afs20 \ltrch\fcs0 \f0\fs20\lang1024\langfe1024\noproof 
\sbasedon10 \slink37 \slocked \ssemihidden Header Char;}{\s39\ql \li0\ri0\sb120\sa120\keep\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs24\alang1025 \ltrch\fcs0 
\fs24\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext0 \sqformat caption;}{\s40\qc \li0\ri0\sb120\keep\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 
\fs20\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext0 Figure;}{\s41\qc \li0\ri0\sb120\keep\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 
\fs20\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext41 Table;}{\s42\qc \li0\ri0\sb120\keep\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 
\fs20\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext42 Tabular;}{\s43\qc \li0\ri0\sb120\keep\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 
\fs20\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext43 Tabbing;}{\s44\qj \fi340\li1024\ri1024\widctlpar\wrapdefault\faauto\rin1024\lin1024\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 
\fs20\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext44 \slink45 \sqformat Quote;}{\*\cs45 \additive \rtlch\fcs1 \ai\af0\afs20 \ltrch\fcs0 \i\f0\fs20\cf17\lang1024\langfe1024\noproof 
\sbasedon10 \slink44 \slocked \spriority29 Quote Char;}{\s46\ql \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af2\afs20\alang1025 \ltrch\fcs0 
\fs20\lang1024\langfe1024\loch\f2\hich\af2\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \snext46 verbatim;}{\s47\ql \fi-283\li283\ri0\sa120\widctlpar\tx283\wrapdefault\faauto\rin0\lin283\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 
\fs20\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext47 List;}{\s48\ql \fi-283\li283\ri0\sa120\widctlpar\tx283\wrapdefault\faauto\rin0\lin283\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 
\fs20\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext48 List 1;}{\s49\qc \li0\ri0\sb120\sa120\keep\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs24\alang1025 \ltrch\fcs0 
\fs24\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext0 latex picture;}{\s50\qc \li0\ri0\sb120\sa120\keep\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs24\alang1025 \ltrch\fcs0 
\fs24\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext0 subfigure;}{\s51\ql \li0\ri0\sb240\sa120\keepn\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \ab\af0\afs32\alang1025 \ltrch\fcs0 
\b\fs32\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext52 bibheading;}{\s52\ql \fi-567\li567\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin567\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 
\fs20\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext52 bibitem;}{\s53\ql \fi-283\li283\ri0\sa120\widctlpar\tx283\wrapdefault\faauto\rin0\lin283\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 
\fs20\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext53 endnotes;}{\s54\ql \fi-113\li397\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin397\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 
\fs20\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext54 \slink55 footnote text;}{\*\cs55 \additive \rtlch\fcs1 \af0\afs20 \ltrch\fcs0 \f0\fs20\lang1024\langfe1024\noproof 
\sbasedon10 \slink54 \slocked \ssemihidden Footnote Text Char;}{\s56\qj \fi-170\li454\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin454\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 
\fs20\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext56 \slink57 endnote text;}{\*\cs57 \additive \rtlch\fcs1 \af0\afs20 \ltrch\fcs0 \f0\fs20\lang1024\langfe1024\noproof 
\sbasedon10 \slink56 \slocked \ssemihidden Endnote Text Char;}{\*\cs58 \additive \rtlch\fcs1 \af0 \ltrch\fcs0 \super \sbasedon10 \ssemihidden \sunhideused footnote reference;}{\*\cs59 \additive \rtlch\fcs1 \af0 \ltrch\fcs0 \super \sbasedon10 
endnote reference;}{\s60\ql \li0\ri0\sb60\sa60\keepn\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 
\sbasedon0 \snext60 acronym;}{\s61\qc \li0\ri0\sa120\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \ab\af0\afs20\alang1025 \ltrch\fcs0 \b\fs20\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 
\sbasedon0 \snext62 abstract title;}{\s62\qj \fi340\li1024\ri1024\widctlpar\wrapdefault\faauto\rin1024\lin1024\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 
\fs20\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext0 abstract;}{\s63\ql \li0\ri0\sb240\sa120\keepn\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \ab\af0\afs20\alang1025 \ltrch\fcs0 
\b\fs20\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext0 contents_heading;}{\s64\ql \li425\ri0\sb240\sa60\keepn\nowidctlpar\tqr\tldot\tx8222\wrapdefault\faauto\rin0\lin425\itap0 \rtlch\fcs1 
\ab\af0\afs20\alang1025 \ltrch\fcs0 \b\fs20\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext65 toc 1;}{\s65\ql \li512\ri0\sb60\sa60\keepn\nowidctlpar
\tqr\tldot\tx8222\wrapdefault\faauto\rin0\lin512\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext66 toc 2;}{
\s66\ql \li1024\ri0\sb60\sa60\keepn\nowidctlpar\tqr\tldot\tx8222\wrapdefault\faauto\rin0\lin1024\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 
\sbasedon0 \snext67 toc 3;}{\s67\ql \li1536\ri0\sb60\sa60\keepn\nowidctlpar\tqr\tldot\tx8222\wrapdefault\faauto\rin0\lin1536\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 
\fs20\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext68 toc 4;}{\s68\ql \li2048\ri0\sb60\sa60\keepn\nowidctlpar\tqr\tldot\tx8222\wrapdefault\faauto\rin0\lin2048\itap0 \rtlch\fcs1 
\af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext69 toc 5;}{\s69\ql \li2560\ri0\sb60\sa60\keepn\nowidctlpar
\tqr\tldot\tx8222\wrapdefault\faauto\rin0\lin2560\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\f0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext69 toc 6;}{
\s70\qj \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af38\afs16\alang1025 \ltrch\fcs0 \fs16\lang1024\langfe1024\loch\f38\hich\af38\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 
\sbasedon0 \snext70 \slink71 \ssemihidden \sunhideused \styrsid7474908 Balloon Text;}{\*\cs71 \additive \rtlch\fcs1 \af38\afs16 \ltrch\fcs0 \f38\fs16\lang1024\langfe1024\noproof \sbasedon10 \slink70 \slocked \ssemihidden \styrsid7474908 
Balloon Text Char;}}{\*\rsidtbl \rsid7474908\rsid13506751}{\mmathPr\mmathFont34\mbrkBin0\mbrkBinSub0\msmallFrac0\mdispDef1\mlMargin0\mrMargin0\mdefJc1\mwrapIndent1440\mintLim0\mnaryLim1}{\info{\title Original file was mlpatmat.tex}
{\doccomm Created using latex2rtf 2.1.1 r1159 (2011-02-07 18:50:15 UTC) on Mon Jun 20 13:47:21 2011}{\operator Yuriy Solodkyy}{\creatim\yr2011\mo6\dy20\hr13\min47}{\revtim\yr2011\mo6\dy20\hr13\min54}{\version2}{\edmins7}{\nofpages18}{\nofwords8332}
{\nofchars47494}{\nofcharsws55715}{\vern49255}}{\*\xmlnstbl {\xmlns1 http://schemas.microsoft.com/office/word/2003/wordml}}\paperw12280\paperh15900\margl2680\margr2700\margt2540\margb1760\gutter0\ltrsect 
\widowctrl\ftnbj\aenddoc\trackmoves0\trackformatting1\donotembedsysfont0\relyonvml0\donotembedlingdata1\grfdocevents0\validatexml0\showplaceholdtext0\ignoremixedcontent0\saveinvalidxml0\showxmlerrors0\horzdoc\dghspace120\dgvspace120\dghorigin1701
\dgvorigin1984\dghshow0\dgvshow3\jcompress\viewkind1\viewscale95\rsidroot7474908 \fet0{\*\wgrffmtfilter 2450}\ilfomacatclnup0{\*\ftnsep \ltrpar \pard\plain \ltrpar\qj \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 
\ltrch\fcs0 \fs20\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \chftnsep 
\par }}{\*\ftnsepc \ltrpar \pard\plain \ltrpar\qj \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 
\af0 \ltrch\fcs0 \insrsid13506751 \chftnsepc 
\par }}{\*\aftnsep \ltrpar \pard\plain \ltrpar\qj \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 
\af0 \ltrch\fcs0 \insrsid13506751 \chftnsep 
\par }}{\*\aftnsepc \ltrpar \pard\plain \ltrpar\qj \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 
\af0 \ltrch\fcs0 \insrsid13506751 \chftnsepc 
\par }}\ltrpar \sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\footerr \ltrpar \pard\plain \ltrpar\qc \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 
\fs20\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \chpgn 
\par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}
{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8
\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain \ltrpar\qj \fi300\li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 
\ltrch\fcs0 \fs20\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 DSL 2011Bordeaux, France 2011 [to be supplied] 
\par \hich\af0\dbch\af31505\loch\f0 Technical Report \hich\af0\dbch\af31505\loch\f0 Y.Solodkyy, G.Dos Reis, B.Stroustrup: Pattern Matching for C++  your \hich\af0\dbch\af31505\loch\f0 visit, Jim, is not \hich\af0\dbch\af31505\loch\f0 acceptable anymore
\par \hich\af0\dbch\af31505\loch\f0 Yuriy Solodkyy
\par }\pard\plain \ltrpar\s34\qc \fi300\li0\ri0\sa120\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Gabriel Dos Reis
\par }\pard\plain \ltrpar\qj \fi300\li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Bjarne Stroustrup Texas A&M University
\par \hich\af0\dbch\af31505\loch\f0 Texas, USA \{yuriys,gdr,bs\}@cse.tamu.edu
\par }\pard\plain \ltrpar\s32\qc \fi300\li0\ri0\sb240\sa240\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \ab\af0\afs36\alang1025 \ltrch\fcs0 \b\fs36\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Pa\hich\af0\dbch\af31505\loch\f0 ttern Matching for C++
\par }\pard\plain \ltrpar\s34\qc \fi300\li0\ri0\sa120\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\field{\*\fldinst {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 date}}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid7474908 \hich\af0\dbch\af31505\loch\f0 6/20/2011}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid13506751 
\par }\pard\plain \ltrpar\s61\qc \fi300\li0\ri0\sa120\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \ab\af0\afs20\alang1025 \ltrch\fcs0 \b\fs20\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 
\af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Abstract
\par }\pard\plain \ltrpar\qj \fi300\li1024\ri1024\widctlpar\wrapdefault\faauto\rin1024\lin1024\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  Pattern mat}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid7474908 \hich\af0\dbch\af31505\loch\f0 s}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
ching has been known in functional programming community as an abstraction mechanism that greatly simplifies the code. Following the success of functional languages, several imperative programmin\hich\af0\dbch\af31505\loch\f0 
g languages had introduced pattern matching into them. While this is relatively easy to do a-priori, when designing a new language, this might become quite a challenge to do a-posteriori when trying to introduce it into an industry strength language like 
\hich\af0\dbch\af31505\loch\f0 C\hich\af0\dbch\af31505\loch\f0 
++. We present ML-like pattern matching for C++ implemented as a pure library in a form of Domain Specific Language built on top of standard C++. Our solution comes very close in terms of performance to its de facto contender \hich\f0 \endash \loch\f0 
 the visitor design pattern,\hich\af0\dbch\af31505\loch\f0  \hich\af0\dbch\af31505\loch\f0 
traditionally used in pattern matching scenarios in C++. Unlike the visitor pattern our solution is non intrusive, open to new classes, avoids the control inversion and is much more conscise, easier to read, maintain and comprehend. It also mimics many of
\hich\af0\dbch\af31505\loch\f0  \hich\af0\dbch\af31505\loch\f0 
the pattern matching facilities (e.g. guards and n+k patterns) available in other languages on the first class basis, letting us experiment with them without any changes to the compiler, while offsetting the semantic discussions that typically go along in
\hich\af0\dbch\af31505\loch\f0 t\hich\af0\dbch\af31505\loch\f0 o the domain of concepts. 
\par }\pard \ltrpar\qj \li0\ri0\sb120\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 CR-numbersubcategorythird-level
\par }\pard \ltrpar\qj \fi300\li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Languages, Design
\par }\pard \ltrpar\qj \li0\ri0\sb60\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \ab\af0 \ltrch\fcs0 \b\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Key words:}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \tab \hich\af0\dbch\af31505\loch\f0 P

\par \hich\af0\dbch\af31505\loch\f0 attern Matching, Visitor Design Pattern, Expression Problem, C++
\par }\pard\plain \ltrpar\s2\ql \li0\ri0\sb240\sa120\keepn\widctlpar\wrapdefault\faauto\outlinelevel1\rin0\lin0\itap0 \rtlch\fcs1 \ab\af0\afs32\alang1025 \ltrch\fcs0 
\b\fs32\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 {\*\bkmkstart BMsec_intro}\hich\af0\dbch\af31505\loch\f0 1{\*\bkmkend BMsec_intro}
\hich\af0\dbch\af31505\loch\f0   Introduction
\par }\pard\plain \ltrpar\qj \li0\ri0\sb60\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
Pattern matching is an abstraction supported by many programming languages, which allows the user to describe in a breve manner a (possibly infinite) set of values accepted by the pattern. Pattern represents effectively a predicate on values, and is usual
\hich\af0\dbch\af31505\loch\f0 l\hich\af0\dbch\af31505\loch\f0 y expected to be much more consciese and readable than the equivalent predicate spelled out directly.
\par }\pard \ltrpar\qj \fi300\li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Popularized by functional programming community, most notably Hope[}{\field{\*\fldinst {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BIB_BMS80 \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 4}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ], ML[}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BIB_ML90 \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 25}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ], Miranda[}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 REF \hich\af0\dbch\af31505\loch\f0 BIB_Miranda85 \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 37}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ] and Haskell[}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BIB_Haskell98Book \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 16}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
], for providing syntax very close to mathematical notations, pattern matching has since been making its way into many imperative programming languages like Pizza[}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 REF\hich\af0\dbch\af31505\loch\f0  BIB_Odersky97pizzainto \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 27}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ], Scala[}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BIB_Scala2nd \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 26}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ], Fortress[}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BIB_RPS10 \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 33}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ], Java[}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BIB_Liu03jmatch_iterable \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 20}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 , }{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 REF BIB_HydroJ2003 \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 18}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 ], C++[}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BIB_Prop96 \\\hich\af0\dbch\af31505\loch\f0 * MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 19}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ], C[}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 REF BIB_Moreau_2003 \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 1}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 ] and others. While this is relatively easy to do a-priori when designing a new language, the introduction of pattern matching into an industry strengths language a-posteriori might become a c\hich\af0\dbch\af31505\loch\f0 
hallenge. The obvious utility of the feature may be overshadowed by the complications in the language semantics necessary to make pattern matching work with other features of the language. A prototype implementation will likely require a lot of effort, bu
\hich\af0\dbch\af31505\loch\f0 t\hich\af0\dbch\af31505\loch\f0  will be hard to publish due to lack of novelty.
\par \hich\af0\dbch\af31505\loch\f0 To balance the utility and effort we follow the approach of Semantically Enhanced Library Languages[}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BIB_SELL \\
* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 36}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
], under which one should rather consider subsetting a general-purpose pro\hich\af0\dbch\af31505\loch\f0 
gramming language (C++ in our case), extended with a tool support (which would be convenient, but not necessary here). Such approach will typically not give you 100% of functionality, but instead would rather give you 80% of it at 20% of the time. This wa
\hich\af0\dbch\af31505\loch\f0 s\hich\af0\dbch\af31505\loch\f0 
 exactly the case with our solution as instead of typical half a year to get any major feature implemented on a scale of C++ language, it took us less than a month to implement it as a SELL and under a week to rewrite an existing application using it.

\par \hich\af0\dbch\af31505\loch\f0 Natu\hich\af0\dbch\af31505\loch\f0 
rally, a library only solution might have limitations that can be overcome in a language solution, which is why we do not propose our current approach as the ultimate library solution, but instead as a transition facility that lets users experiment with p
\hich\af0\dbch\af31505\loch\f0 a\hich\af0\dbch\af31505\loch\f0 
ttern matching in C++ while letting us experiment with and eventually shape the the language solution. The library only solution exposes all the functionality that will eventually be available through compiler.
\par \hich\af0\dbch\af31505\loch\f0 To give a quick taste of what our library ena\hich\af0\dbch\af31505\loch\f0 bles, let\hich\f0 \rquote \loch\f0 s look at an example from the domain where pattern matching is known to cut the edge of brevity and readibility 
\hich\f0 \endash \loch\f0  compiler construction. Imagine a simple language of expressions:
\par }\pard \ltrpar\qc \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\par }\pard \ltrpar\qj \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 OCaml data\hich\af0\dbch\af31505\loch\f0 
type describing this grammar as well as simple evaluator of expressions in it can be declared as following:
\par }\pard \ltrpar\qc \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\par }\pard \ltrpar\qj \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 The corresponding C++ data types are slightly more verbose, though the only reason we have 
\hich\af0\dbch\af31505\loch\f0 not parameterized them was to keep the example simple.
\par }\pard \ltrpar\qc \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\par }\pard \ltrpar\qj \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Together with evaluator they form an instance of the }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 
\i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Interpreter Design Pattern}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 [}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
REF BIB_DesignPatterns1993 \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 12}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 ]. Unlike the typ\hich\af0\dbch\af31505\loch\f0 e definitions, the evaluator for the language, implemented on top of our pattern matching library is almost as breve as its version in OCaml:
\par }\pard \ltrpar\qc \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\par }\pard \ltrpar\qj \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 The only definitions we omited here that prevent the exam\hich\af0\dbch\af31505\loch\f0 
ple from being fully functional are the mappings of class members to corresponding binding positions. We list them here for completeness, while their meaning will be explained later in section\~. Here we\hich\f0 \rquote \loch\f0 
d like to mention though that these definitions are \hich\af0\dbch\af31505\loch\f0 o\hich\af0\dbch\af31505\loch\f0 nly needed to support the variables binding and not the type switching functionality of the \hich\af0\dbch\af31505\loch\f0 Match.
\par }\pard \ltrpar\qc \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\par }\pard \ltrpar\qj \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 The above syntax is enabled without any external tool support through the use of n
\hich\af0\dbch\af31505\loch\f0 ew C++0x features[}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BIB_C__0x \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 15}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ], template meta-programming and macros. As we show in section\~}{\field{\*\fldinst {\rtlch\fcs1 
\af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BMsec_eval \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 4}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 , it runs up to 80% faster (depending on the usage scenario, compiler and underlain hardware) than a simila\hich\af0\dbch\af31505\loch\f0 r code crafted with the }{\rtlch\fcs1 \ai\af0 
\ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Visitor Design Pattern}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 .
\par }\pard\plain \ltrpar\s3\ql \li0\ri0\sb120\sa120\keepn\widctlpar\wrapdefault\faauto\outlinelevel2\rin0\lin0\itap0 \rtlch\fcs1 \ab\af0\afs32\alang1025 \ltrch\fcs0 
\b\fs32\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 1.1  Motivation
\par }\pard\plain \ltrpar\qj \li0\ri0\sb60\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 The ideas and the library presented here originated from our rather unsatisfactory expirience in working with various C++ front-ends and program analysis frameworks developed in C++[}{\field{\*\fldinst {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BIB_Pi\hich\af0\dbch\af31505\loch\f0 vot09 \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 31}}}\sectd \ltrsect
\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 , }{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BIB_Phoenix \\* MERGEFORMAT }}{\fldrslt {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 22}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 , }{\field{\*\fldinst {\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BIB_Clang \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 2}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 , }{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BIB_Lise \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 Lise}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ]. The problem was not in the frameworks per se, but in the fact that we had to use }{
\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Visitor Design Pattern}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 [}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 REF BIB_Desig\hich\af0\dbch\af31505\loch\f0 nPatterns1993 \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 12}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
] to inspect, traverse and elaborate abstract syntax trees of their target languages. Having written enough visitors to realize how unsuitable they were for the job, we started looking for other mechanisms to work with abs\hich\af0\dbch\af31505\loch\f0 
tract syntax trees, even if they would have turned out to be significantly slower. Presense of dynamic casts in many places, often nested, to answer simple structural questions without having to resort to visitors, was a strong indicator that even though 
\hich\af0\dbch\af31505\loch\f0 v\hich\af0\dbch\af31505\loch\f0 isitors were fast, in many non-critical cases users preferred shorter, cleaner and a more clear code to performance. The usage of \hich\af0\dbch\af31505\loch\f0 
dynamic_cast in those cases was resembling the use of pattern matching in functional languages to unpack alg\hich\af0\dbch\af31505\loch\f0 
ebraic data types. Functional languages have been long known to be very suitable for developing program analysis tools because of the brevity with which the necessary algorithms can be expressed. This is why our initial goal was to develop a domain-specif
\hich\af0\dbch\af31505\loch\f0 i\hich\af0\dbch\af31505\loch\f0 c library within C++ that would enable us to express various predicates on tree-like structures with the brevity of functional languages.
\par }\pard\plain \ltrpar\s3\ql \li0\ri0\sb120\sa120\keepn\widctlpar\wrapdefault\faauto\outlinelevel2\rin0\lin0\itap0 \rtlch\fcs1 \ab\af0\afs32\alang1025 \ltrch\fcs0 
\b\fs32\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 1.2  Visitor Design Pattern
\par }\pard\plain \ltrpar\qj \li0\ri0\sb60\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \ai\af0 
\ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Visitor Design Pattern}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 [}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 REF BIB_DesignPatterns1993 \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 12}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ] was devised to sol\hich\af0\dbch\af31505\loch\f0 
ve a problem of extending existing classes with new functions in object-oriented languages. Consider the above Expr example and imagine we would like to provide a pretty printing of expressions. A typical object-oriented approach would be to introduce a v
\hich\af0\dbch\af31505\loch\f0 i\hich\af0\dbch\af31505\loch\f0 rtual function \hich\af0\dbch\af31505\loch\f0 virtual void print() const = 0; inside the abstract base class \hich\af0\dbch\af31505\loch\f0 
Expr, which will be implemented correspondingly in all derived classes. This works well as long as we know all the required operations on the \hich\af0\dbch\af31505\loch\f0 
abstract class in advance. Unfortunately this is very difficult to achieve in reality as the code evolves, especially in production environment. To put this in context, imagine that after the above interface with pretty printing functionality has been dep
\hich\af0\dbch\af31505\loch\f0 l\hich\af0\dbch\af31505\loch\f0 
oyed, we decided that we need a similar functionality that persists the expression in XML format. Adding new virtual function implies modifying the base class and creating a versioning problem with the code that has been deployed already using the old int
\hich\af0\dbch\af31505\loch\f0 e\hich\af0\dbch\af31505\loch\f0 rface.
\par }\pard \ltrpar\qj \fi300\li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 To alleviate this problem, Visitor Design Pattern separates the }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 
\i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 commonality}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  of all such future member-functions from their }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 specifics}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . The former deals with identifying the most specific derived class of the reciever object, known to the system at th
\hich\af0\dbch\af31505\loch\f0 
e time the base class was designed. The latter provides implementation of the required functionality once the most specific derived class has been identified. The interaction between the two is encoded in the protocol that fixes }{\rtlch\fcs1 \ai\af0 
\ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 visitation interface}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  enumer\hich\af0\dbch\af31505\loch\f0 
ating all known derived classes on one side and a dispatching mechanism that guarantees to select the most specific case with respect to the dynamic type of the reciever in the visitation interface. An implementation of this protocol for our Expr example 
\hich\af0\dbch\af31505\loch\f0 m\hich\af0\dbch\af31505\loch\f0 ight look as following:
\par }\pard \ltrpar\qc \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\par }\pard \ltrpar\qj \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Note that even though implementations of \hich\af0\dbch\af31505\loch\f0 
accept member-functions are syntactically identical, a different \hich\af0\dbch\af31505\loch\f0 visit is called. We rely here on \hich\af0\dbch\af31505\loch\f0 the overload resolution mechanism of C++ to pick the most specialized 
\hich\af0\dbch\af31505\loch\f0 visit member-function applicable to the static type of \hich\af0\dbch\af31505\loch\f0 *this. This is a mere code maintenance convenience that, unfortunately, often confuses novices \hich\af0\dbch\af31505\loch\f0 
on what is going on. We thus would like to point out that member-functions in the visitation interface are not required to be called with the same name, \hich\f0 \endash \loch\f0  we could have equally well called them \hich\af0\dbch\af31505\loch\f0 visit
\\s\\do5(}{\rtlch\fcs1 \af0\afs16 \ltrch\fcs0 \fs16\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 v}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 )alue, \hich\af0\dbch\af31505\loch\f0 visit\\\hich\af0\dbch\af31505\loch\f0 
s\\do5(}{\rtlch\fcs1 \af0\afs16 \ltrch\fcs0 \fs16\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 p}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 )lus etc. making the corresponding changes to calls inside 
\hich\af0\dbch\af31505\loch\f0 Value::accept, \hich\af0\dbch\af31505\loch\f0 Plus::accept etc.
\par }\pard \ltrpar\qj \fi300\li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
A user can now implement his new functions similarly to the following function to convert expressions to string:
\par }\pard \ltrpar\qc \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\par }\pard \ltrpar\qj \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Function \hich\af0\dbch\af31505\loch\f0 
eval we presented above as well as any new function that we would like to add to \hich\af0\dbch\af31505\loch\f0 Expr can now be implemented in much the same way, witihout the need to change bas\hich\af0\dbch\af31505\loch\f0 
e interface. This flexibility does not come for free thought and we would like to point out some pros and cons of this solution.
\par }\pard \ltrpar\qj \fi300\li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
The most important advantage of the visitor design pattern is possibility to add new operations to the class hierarchy without \hich\af0\dbch\af31505\loch\f0 the necessity to change the interface each time. It\hich\f0 \rquote \loch\f0 
s second most quoted advantage is typically speed \hich\f0 \endash \loch\f0  the overhead of two virtual function calls incurred by the double dispatch present in the visitor design pattern is often negligable on the modern arch
\hich\af0\dbch\af31505\loch\f0 i\hich\af0\dbch\af31505\loch\f0 tectures. There are quite a few disadvantages however.
\par \hich\af0\dbch\af31505\loch\f0 The }{\rtlch\fcs1 \ab\af0 \ltrch\fcs0 \b\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 increased amount of boilerplate code}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
 that has to be added to support the above solution cannot go unnoticed. Several entities had to be forward declared because of the mutual recursivity of their definitions. The solution is }{\rtlch\fcs1 \ab\af0 \ltrch\fcs0 \b\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 specific to hierarchy}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  as we had to declare a visitation interface specific to the base class. It is also }{\rtlch\fcs1 \ab\af0 \ltrch\fcs0 
\b\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 intrusive}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  since we had to inject syntactically the same definition of \hich\af0\dbch\af31505\loch\f0 
accept method into every class participating in visitation. The amount of the necess\hich\af0\dbch\af31505\loch\f0 
ary support increases as additional arguments have to be passed into the visitor to be available during the visitation. This aspect can be seen in the example\~ where we have to store both functors inside the visitor.
\par \hich\af0\dbch\af31505\loch\f0 More importantly, visitors }{\rtlch\fcs1 \ab\af0 \ltrch\fcs0 \b\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 hinder exten\hich\af0\dbch\af31505\loch\f0 sibility}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 
 of the class hierarchy: new classes added to the hierarchy after the visitation interface has been fixed, will be treated as their most derived base class present in the interface. A solution to this problem has been proposed in the form of }{
\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Extens\hich\af0\dbch\af31505\loch\f0 ible Visitors with Default Cases}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 [}{\field{\*\fldinst {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BIB_Zenger_2001 \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 41}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 \hich\f0 , \'a7\loch\f0 
4.2], however the solution, after remapping it onto C++, has problems of its own. The visitation interface hierarchy can easily be grown linearly (adding new cases for the new clas\hich\af0\dbch\af31505\loch\f0 
ses in the original hierarchy each time), but independent extensions by different authorities require developer\hich\f0 \rquote \loch\f0 
s intervention to unify them all, before they can be used together. This may not be feasible in environments that use dynamic linking. To avoid\hich\af0\dbch\af31505\loch\f0  \hich\af0\dbch\af31505\loch\f0 
writing even more boilerplate code in new visitors, the solution would require usage of virtual inheritance, which typically has an overhead of extra memory dereferencing. On top of the double dispatch already present in the visitor pattern, the solution 
\hich\af0\dbch\af31505\loch\f0 w\hich\af0\dbch\af31505\loch\f0 
ill incure two additional virtual calls and a dynamic cast for each level of visitor extension. Additional double dispatch is incurred by forwarding of default handling from base visitor to a derived one, while the dynamic cast is required for safety and 
\hich\af0\dbch\af31505\loch\f0 c\hich\af0\dbch\af31505\loch\f0 
an be replaced with a static case when visitation interface is guaranteed to be grown linearly (extended by one authority only). Yet another virtual call is required to be able to forward computations to subcomponents on tree-like structures to the most d
\hich\af0\dbch\af31505\loch\f0 e\hich\af0\dbch\af31505\loch\f0 rived visitor. This last function lets one avoid the necessesity of using heap to allocate a temporary visitor through the }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 Factory Design Pattern}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 [}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
REF BIB_DesignPatterns1993 \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 12}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 ] used in }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Extensible Visitor}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
 solution originally proposed by by\hich\af0\dbch\af31505\loch\f0  Krishnamurti, Felleisen and Friedman[}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BIB_Krishnamurthi98 \\* MERGEFORMAT }}{\fldrslt {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 17}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ].
\par \hich\af0\dbch\af31505\loch\f0 Once all the boilerplate related to visitors has been written and the visitation interface has been fixed we are still left with some annoyances incurred by the pattern. O\hich\af0\dbch\af31505\loch\f0 
ne of them is the necessity to work with the }{\rtlch\fcs1 \ab\af0 \ltrch\fcs0 \b\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 control inversion}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
 that visitors put in place. Because of it we have to save any local state and any arguments that some of the \hich\af0\dbch\af31505\loch\f0 visit call-backs might need from the calling environment. Similarl\hich\af0\dbch\af31505\loch\f0 
y, we have to save the result of the visitation as we cannot assume that all the visitors that will potenitally be implemented on a given hierarchy will use the same result type. Using visitors in a generic algorithm requires even more precautions. We sum
\hich\af0\dbch\af31505\loch\f0 m\hich\af0\dbch\af31505\loch\f0 arize these visitor-related issues in the following motivating example, followed by an illustration of a pattern matching solution to the same problem enabled with our library.
\par }\pard\plain \ltrpar\s3\ql \li0\ri0\sb120\sa120\keepn\widctlpar\wrapdefault\faauto\outlinelevel2\rin0\lin0\itap0 \rtlch\fcs1 \ab\af0\afs32\alang1025 \ltrch\fcs0 
\b\fs32\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 1.3  Motivating Example
\par }\pard\plain \ltrpar\qj \li0\ri0\sb60\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 While comparing generic programming facilities availabl\hich\af0\dbch\af31505\loch\f0 
e to functional and imperative languages (mainly Haskell and C++), Dos Reis and Jarvi present the following example in Haskell describing a sum functor[}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
REF BIB_DRJ05 \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 8}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ]:
\par }\pard \ltrpar\qc \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\par }\pard \ltrpar\qj \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 In simple w\hich\af0\dbch\af31505\loch\f0 ords, the function \hich\af0\dbch\af31505\loch\f0 
eitherLift above takes two functions and an object and depending on the actual type constructor the object was created with, calls first or second function on the embedded value, encoding the result cor\hich\af0\dbch\af31505\loch\f0 resondingly.
\par }\pard \ltrpar\qj \fi300\li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
Its equivalent in C++ is not as straightforward. The idiomatic handling of discriminated unions in C++ typically assumes use of the }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Visitor Design Pattern}{\rtlch\fcs1 
\af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 [}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BIB_DesignPatterns1993 \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 12}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ].
\par }\pard \ltrpar\qc \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\par }\pard \ltrpar\qj \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
The code above defines the necessary parameterized data structures as well as a correspondingly parameterized visitor class capable of introspecting it at run-time. The authors agree with us that }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\loch\af0\dbch\af31505\hich\f0 \'93\loch\f0 The code has a fair amount of boilerplat\hich\af0\dbch\af31505\loch\f0 \hich\f0 e to simulate pattern matching...\'94}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
 The actual implementation of \hich\af0\dbch\af31505\loch\f0 lift in C++ now amounts to declaring and invoking a visitor:
\par }\pard \ltrpar\qc \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\par }\pard \ltrpar\qj \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 The same function expressed with our pa\hich\af0\dbch\af31505\loch\f0 
ttern matching facility seems to be much closer to the original Haskell definition:
\par }\pard \ltrpar\qc \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\par }\pard \ltrpar\qj \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 It is also as fast as the visitor solution, but unlike the visitors based approach neither requires 
\hich\af0\dbch\af31505\loch\f0 EitherVisitor class anymore (together with forward declarations it needed), nor any of the \hich\af0\dbch\af31505\loch\f0 
accept member-functions injected in all three classes. We do require binding definitions though to be able to bind variables \hich\af0\dbch\af31505\loch\f0 x\hich\af0\dbch\af31505\loch\f0  and \hich\af0\dbch\af31505\loch\f0 y: }{\rtlch\fcs1 \af0 
\ltrch\fcs0 \cs58\super\insrsid13506751\charrsid7474908 \chftn {\footnote \ltrpar \pard\plain \ltrpar\s54\ql \fi-113\li397\ri0\widctlpar\wrapdefault\faauto\rin0\lin397\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 
\fs20\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \cs58\super\insrsid13506751\charrsid7474908 \chftn }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
 Definitions of obvious functions \hich\af0\dbch\af31505\loch\f0 left and \hich\af0\dbch\af31505\loch\f0 right have been ommitted in both cases.}}}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\par }\pard \ltrpar\qc \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\par }\pard \ltrpar\qj \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Note that these binding definitons are made once fo\hich\af0\dbch\af31505\loch\f0 
r all possible instantiations with the use of partial template specialization in C++.
\par }\pard\plain \ltrpar\s3\ql \li0\ri0\sb120\sa120\keepn\widctlpar\wrapdefault\faauto\outlinelevel2\rin0\lin0\itap0 \rtlch\fcs1 \ab\af0\afs32\alang1025 \ltrch\fcs0 
\b\fs32\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 1.4  Summary
\par }\pard\plain \ltrpar\qj \li0\ri0\sb60\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 The contributions of the paper can be summarized as following:
\par }\pard\plain \ltrpar\s47\ql \fi-300\li600\ri0\sb50\sa120\widctlpar\tx283\wrapdefault\faauto\rin0\lin600\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \bullet \tab \hich\af0\dbch\af31505\loch\f0 We present a technique that can be used to implement type switching effectively based on the\hich\af0\dbch\af31505\loch\f0  run-time type of the argument. 
\par }\pard \ltrpar\s47\ql \fi-300\li1200\ri0\sb50\sa120\widctlpar\tx283\wrapdefault\faauto\rin0\lin1200\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \bullet \tab \hich\af0\dbch\af31505\loch\f0 The technique outperforms its de facto contender \hich\f0 
\endash \loch\f0  visitor design pattern without sacrifying extensibility. 
\par \bullet \tab \hich\af0\dbch\af31505\loch\f0 It works in the presense of multiple inheritance, including repeated and virtual inheritance as well as in gen\hich\af0\dbch\af31505\loch\f0 eric code. 
\par \bullet \tab \hich\af0\dbch\af31505\loch\f0 The technique generalizes to other object-oriented languages that use virtual tables to implement dynamic dispatch. 
\par }\pard \ltrpar\s47\ql \fi-300\li600\ri0\sb50\sa120\widctlpar\tx283\wrapdefault\faauto\rin0\lin600\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \bullet \tab \hich\af0\dbch\af31505\loch\f0 
We present a functional style pattern matching for C++ built as a library employing the above technique. 
\par }\pard \ltrpar\s47\ql \fi-300\li1200\ri0\sb50\sa120\widctlpar\tx283\wrapdefault\faauto\rin0\lin1200\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \bullet \tab \hich\af0\dbch\af31505\loch\f0 
The solution is open, non-intrusive and can be applied to any class hierarchy retroactively. 
\par \bullet \tab \hich\af0\dbch\af31505\loch\f0 It allows one to avoid the control inversion typical for visitors. 
\par \bullet \tab \hich\af0\dbch\af31505\loch\f0 We provide performance and ease of use comparison based on real code. 
\par }\pard\plain \ltrpar\qj \li0\ri0\sb100\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 The novelty of the \hich\af0\dbch\af31505\loch\f0 paper lays in a new method that can be used by compilers of object-oriented languages as well as libraries written in them to implement }{\rtlch\fcs1 
\ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 type switching}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 , }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
type testing}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 , }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 pattern matching}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0  and }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 multiple dispatch}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
 efficiently. We look at different approaches that a\hich\af0\dbch\af31505\loch\f0 re taken in implementing algebraic data types in C++ today and present a unified pattern matching syntax that works uniformly with all of them. We also generalize Haskell
\hich\f0 \rquote \loch\f0 s n+k patterns to any invertable operations. Semantics issues that typically accompa\hich\af0\dbch\af31505\loch\f0 n\hich\af0\dbch\af31505\loch\f0 
y n+k pattern are handled transparently by forwarding the problem into the concepts domain, thanks to the fact that we work in a library setting. A practical benefit of our solution is that it can be used right away with any compiler with a descent suppor
\hich\af0\dbch\af31505\loch\f0 t\hich\af0\dbch\af31505\loch\f0  of C++0x without requiring to install any additional tools or preprocessors.
\par }\pard \ltrpar\qj \fi300\li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 The rest of this paper is structured as following. In Section\~}{\field{\*\fldinst {\rtlch\fcs1 
\af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BMsec_bg \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 2}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  we present evolution of pattern matching in different languages, presenting informa\hich\af0\dbch\af31505\loch\f0 
lly through example commonly used terminology and semantics of various pattern matching facilities. Section\~}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BMsec_pm \\* MERGEFORMAT }}{\fldrslt {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 3}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
 presents various approaches that are taken in C++ to implementing algebraic data types as well as demonstrates unif\hich\af0\dbch\af31505\loch\f0 orm handling of them in our pattern matching library. Section\~}{\field{\*\fldinst {\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BMsec_impl \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ?}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  discusses the }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 v-table caching}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
 technique that made the efficient implementation of pattern matching possible, while Section\~}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BMsec_eval \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 4}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  p\hich\af0\dbch\af31505\loch\f0 
rovides performance evaluation of this technique against common alternatives. Section\~}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BMsec_rw \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 6}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  discusses some related work, while Section\~}{\field{\*\fldinst {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BMsec_cc \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 8}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  concludes by discussing some future directions and possible i\hich\af0\dbch\af31505\loch\f0 mprovements.
\par }\pard\plain \ltrpar\s2\ql \li0\ri0\sb240\sa120\keepn\widctlpar\wrapdefault\faauto\outlinelevel1\rin0\lin0\itap0 \rtlch\fcs1 \ab\af0\afs32\alang1025 \ltrch\fcs0 
\b\fs32\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 {\*\bkmkstart BMsec_bg}\hich\af0\dbch\af31505\loch\f0 2{\*\bkmkend BMsec_bg}\hich\af0\dbch\af31505\loch\f0 
  Background
\par }\pard\plain \ltrpar\qj \li0\ri0\sb60\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Pattern matching in the context of a programming language was first introduced in a string manipulation language SNOBOL[}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 REF BIB_SNOBOL64 \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 11}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 ]. It\hich\f0 \rquote \loch\f0 s fourth reincarnation SNOBOL4 had patterns as fir\hich\af0\dbch\af31505\loch\f0 st-class data types providing operations of concatenation and alternation on them[}{\field{\*\fldinst {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BIB_SNOBOL71 \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 13}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ]. The first reference to a pattern matching construct that resembles the one found in statically typed functional languages today is usu\hich\af0\dbch\af31505\loch\f0 
ally attributed to Burstall and his work on structural induction[}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BIB_Burstall69provingproperties \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 3}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ].
\par }\pard \ltrpar\qj \fi300\li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
In the context of object-oriented programming, pattern matching has been first explored in Pizza programming language[}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BIB_Odersky
\hich\af0\dbch\af31505\loch\f0 97pizzainto \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 27}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 ]. These efforts have been continued in Scala[}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BIB_Scala2nd \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 26}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ] and together with notable work of Burak Emir on }{\rtlch\fcs1 \ai\af0 
\ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Object-Oriented Pattern Matching}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 [}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 REF BIB_EmirThesis \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 10}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 ] have resulted in \hich\af0\dbch\af31505\loch\f0 incorporation of pattern matching into the language.
\par \hich\af0\dbch\af31505\loch\f0 Pattern matching has been closely related to }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 algebraic data types}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0  and }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 equational reasoning}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
 since the early days of functional programming. In languages like ML and Haskel an }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Algebraic Data Type}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0  is a data\hich\af0\dbch\af31505\loch\f0  type each of whose values is picked from a disjoint sum of (possibly recursive) data types, called }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 variants}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . Each of the variants is marked with a unique symbolic constant called }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 constructor}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . Constructors provide a convenient way of creating a value of it\hich\af0\dbch\af31505\loch\f0 
s variant type as well as a way of discriminating its variant type from the algebraic data type through pattern matching.
\par \hich\af0\dbch\af31505\loch\f0 Algebraic data type \hich\af0\dbch\af31505\loch\f0 expr from Section\~}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BMsec_intro \\* MERGEFORMAT }}{\fldrslt {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 1}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  consists of 5 variants, mark
\hich\af0\dbch\af31505\loch\f0 ed with constructors \hich\af0\dbch\af31505\loch\f0 Value, \hich\af0\dbch\af31505\loch\f0 Plus, \hich\af0\dbch\af31505\loch\f0 Minus, \hich\af0\dbch\af31505\loch\f0 Times and \hich\af0\dbch\af31505\loch\f0 
Divide respectively. Constructor \hich\af0\dbch\af31505\loch\f0 Value expects a value of type \hich\af0\dbch\af31505\loch\f0 int during construction, as well as any pattern that admits values of type \hich\af0\dbch\af31505\loch\f0 
int during decomposition through pattern matching. Similarly, the o\hich\af0\dbch\af31505\loch\f0 ther four constructors expect a value of a carthesian product of two \hich\af0\dbch\af31505\loch\f0 
expr types during construction, as well as any pattern that would admit a value of such type during decomposition.
\par \hich\af0\dbch\af31505\loch\f0 Algebraic data types can be parameterize\hich\af0\dbch\af31505\loch\f0 d and recursive, as demonstrated by the following Haskell code that defines a binary tree parameterized on type \hich\af0\dbch\af31505\loch\f0 
k of keys and type \hich\af0\dbch\af31505\loch\f0 d of data stored in the nodes:
\par }\pard \ltrpar\qc \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\par }\pard \ltrpar\qj \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Naturally, they can be decomposed in a generic algorithm like the function 
\hich\af0\dbch\af31505\loch\f0 find below, defined through case analysis on the tree\hich\f0 \rquote \loch\f0 s structure:
\par }\pard \ltrpar\qc \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\par }\pard \ltrpar\qj \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
The set of values described by a given algebraic data type is defined inductively as the least set closed under constructor functions of its variants. Algebraic data types draw their name from the practice of using case distinction in mathematical functio
\hich\af0\dbch\af31505\loch\f0 n\hich\af0\dbch\af31505\loch\f0  definitions and proofs that involve }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 algebraic terms}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 .
\par }\pard \ltrpar\qj \fi300\li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
One of the main differences of algebraic data types from classes in object-oriented languages is that an algebraic data type definition is }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 closed}{\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  because it fixes the structure of its instances once and\hich\af0\dbch\af31505\loch\f0 
 for all. Once we have listed all the variants a given algebraic data type may have we cannot extend it with new variants without modifying its defintion. This is not the case in object-oriented languages, where classes are }{\rtlch\fcs1 \ai\af0 
\ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 open}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  to extension through subcla\hich\af0\dbch\af31505\loch\f0 ssing. 
\par \hich\af0\dbch\af31505\loch\f0 Closeness of algebraic data types is particularly useful in reasoning about programs by case analysis and alows the compiler to perform an automatic }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 incompleteness}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  check \hich\f0 \endash \loch\f0  test of whether a given match expression covers all possible cases. A relate
\hich\af0\dbch\af31505\loch\f0 d notion of }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 redundancy}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
 checking arises from the tradition of using }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 first-fit}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
 strategy in pattern matching. It warns the user of any }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 case clause}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  inside a }{\rtlch\fcs1 
\ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 matching expression}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  that will never be entered because of preceeding one being more general. Object-ori
\hich\af0\dbch\af31505\loch\f0 ented languages, especially C++, typically prefer }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 best-fit}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
 strategy (e.g. for overload resolution and class template specialization) because it is not prone to errors where semantics of a statement might change depending on the ordering of preceeding defin\hich\af0\dbch\af31505\loch\f0 
itions. The notable exception in C++ semantics that prefers the }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 first-fit}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
 strategy is ordering of \hich\af0\dbch\af31505\loch\f0 catch handlers of a try-block. Similarly to functional languages the compiler will perform }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 redundancy}{\rtlch\fcs1 
\af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  checking on catch handlers and issue a\hich\af0\dbch\af31505\loch\f0  warning that lists the redundant cases.
\par \hich\af0\dbch\af31505\loch\f0 The patterns that work with algebraic data types we have seen so far are generally called }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 tree patterns}{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \hich\af0\dbch\af31505\loch\f0  or }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 data constructor patterns}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
. A special case of these patterns are }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 list patterns}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  and }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 
\i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 tuple patterns}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . The former\hich\af0\dbch\af31505\loch\f0 
 lets one split a list into a sequence of elements in its beginning and a tail with the help of list constructor \hich\af0\dbch\af31505\loch\f0 : and an empty list constructor \hich\af0\dbch\af31505\loch\f0 [] e.g. \hich\af0\dbch\af31505\loch\f0 
[x:y:rest]. The latter does the same with tuples through the use of tuple constructor \hich\af0\dbch\af31505\loch\f0 \hich\f0 (\'84\loch\f0 ...,) e.g. \hich\af0\dbch\af31505\loch\f0 ([x:xs],\hich\f0 \rquote \loch\f0 b\hich\f0 \rquote \loch\f0 
,(1,2.0),"hi",True).
\par \hich\af0\dbch\af31505\loch\f0 Pattern matching is not used solely with algebraic da\hich\af0\dbch\af31505\loch\f0 ta types and can equally well be applied to built-in types. The following Haskell code defines factorial function in the form of equations:

\par }\pard \ltrpar\qc \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\par }\pard \ltrpar\qj \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Here 0 in the left hand side of the first }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 equation}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  is an ex\hich\af0\dbch\af31505\loch\f0 ample of a }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
value pattern}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  (also known as }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 constant pattern}{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ) that will only match when the actual argument passed to the function factorial is 0. The }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 variable pattern}{\rtlch\fcs1 
\af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  \hich\af0\dbch\af31505\loch\f0 n (also referred to as }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 identifier pattern}{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ) in the left ha\hich\af0\dbch\af31505\loch\f0 nd side of the second equation will match any value, }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 binding}{\rtlch\fcs1 
\af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  variable \hich\af0\dbch\af31505\loch\f0 n to that value in the right hand side of equation. Similarly to variable pattern, }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 wildcard pattern}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  \\\hich\af0\dbch\af31505\loch\f0 s\\do5() will ma\hich\af0\dbch\af31505\loch\f0 
tch any value with the exception that the matched value will not be bound to any variable. Value patterns, variable patterns and wildcard patterns are generally called }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
primitive patterns}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . Patterns like variable and wildcard patterns that never fail to matc\hich\af0\dbch\af31505\loch\f0 h are called }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 
\i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 irrefutable}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 , in contrast to }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 refutable}{
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  patterns like value patterns, which may fail to match.
\par }\pard \ltrpar\qj \fi300\li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 In Haskell 98[}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 REF BIB_Haskell98Book \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 16}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 ] the above definition of factorial could also be written as:
\par }\pard \ltrpar\qc \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\par }\pard \ltrpar\qj \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 The \hich\af0\dbch\af31505\loch\f0 (n+1) pattern in the left hand side of equation is an example of }{
\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 n+k pattern}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 \hich\f0 . Accordingly to its informal semantics \'93\loch\f0 Matching an }
{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  COMMENTS " $n+k$" }}{\fldrslt }}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 n}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 +}{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 k}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0  pattern (where }{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  COMMENTS " $n\hich\af0\dbch\af31505\loch\f0 $" }}{\fldrslt }}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {
\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 n}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  is a variable and }{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0  COMMENTS " $k$" }}{\fldrslt }}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 k}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0  is a positive integer literal) against a value }{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  COMMENTS " $v$" }}{\fldrslt }}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {
\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 v}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  succeeds if }{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0  COMMENTS " $v \\ge k$" }}{\fldrslt }}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 v}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\loch\af0\dbch\af31505\hich\f0 \u8805\'3f}{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 k}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 , resulting in the binding of }{\field{\*\fldinst 
{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  COMMENTS " $n$" }}{\fldrslt }}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 n}{\rtlch\fcs1 
\af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  to }{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  COMMENTS " $v-k$" }}{\fldrslt }}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {
\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 v}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \loch\af0\dbch\af31505\hich\f0 \u8722\'3f}{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 k}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 \hich\f0 , and fails otherwise\'94\loch\f0 [}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 R
\hich\af0\dbch\af31505\loch\f0 EF BIB_haskell98 \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 29}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 ]. n+k patterns were introduced into Haskel to let users express inductive functions on natural numbers in much the same way as functions defined through case analysis on algebraic data types. Besides conscies notation 
\hich\af0\dbch\af31505\loch\f0 
such language feature could facilitate automatic proof of termination of such functions by compiler. Peano numbers, however, used as an analogy to algebraic data type representation of natural numbers, is not always the best abstraction for representing o
\hich\af0\dbch\af31505\loch\f0 t\hich\af0\dbch\af31505\loch\f0 
her mathematical operations. This, together with numerous ways of defining semantics of generalized n+k patterns were some of the reasons why the feature was never generalized to other kinds of expressions, even though there were plenty of known applicati
\hich\af0\dbch\af31505\loch\f0 o\hich\af0\dbch\af31505\loch\f0 ns. Unfortunately, numerous debates over semantics and usefullness of the feature resulted in n+k patterns being removed from the language altogether in Haskell 2010 standard[}
{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BIB_haskell2010 \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 9}}}\sectd \ltrsect
\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ].
\par }\pard \ltrpar\qj \fi300\li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 While n+k patterns were something only \hich\af0\dbch\af31505\loch\f0 
Haskell and Hope had, another common feature of many programming languages that have pattern matching are guards. A }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 guard}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0  is a predicate attached to a pattern that may make use of the variables bound in it. The result of its evaluation will determine wheth\hich\af0\dbch\af31505\loch\f0 
er the case clause and the body associated with it will be }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 accepted}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  or }{\rtlch\fcs1 
\ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 rejected}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . The following OCaml code for }{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0  COMMENTS " $exp$" }}{\fldrslt }}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 exp}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0  language from Section\~}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BMsec_intro \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 1}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  defines the rules for factorizing expressions }{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \hich\af0\dbch\af31505\loch\f0  COMMENTS " $e_1e_2+e_1e_3$" }}{\fldrslt }}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  EQ }{\rtlch\fcs1 
\ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 e}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \\\hich\af0\dbch\af31505\loch\f0 s\\do5(}{\rtlch\fcs1 \af0\afs16 \ltrch\fcs0 \fs16\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 1}{
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 )}{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 e}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \\\hich\af0\dbch\af31505\loch\f0 s\\do5(}{
\rtlch\fcs1 \af0\afs16 \ltrch\fcs0 \fs16\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 2}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 )+}{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 e
}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \\\hich\af0\dbch\af31505\loch\f0 s\\do5(}{\rtlch\fcs1 \af0\afs16 \ltrch\fcs0 \fs16\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 1}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 )}{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 e}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \\\hich\af0\dbch\af31505\loch\f0 s\\do5(}{\rtlch\fcs1 \af0\afs16 \ltrch\fcs0 
\fs16\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 3}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 )}}{\fldrslt }}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0  into }{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  COMMENTS " $e_1(e_2+e_3)$" }}{\fldrslt }}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\field{\*\fldinst {\rtlch\fcs1 
\af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  EQ }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 e}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \\\hich\af0\dbch\af31505\loch\f0 s\\do5(}{
\rtlch\fcs1 \af0\afs16 \ltrch\fcs0 \fs16\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 1}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 )(}{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 e
}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \\\hich\af0\dbch\af31505\loch\f0 s\\do5(}{\rtlch\fcs1 \af0\afs16 \ltrch\fcs0 \fs16\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 2}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 )+}{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 e}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \\\hich\af0\dbch\af31505\loch\f0 s\\do5(}{\rtlch\fcs1 \af0\afs16 \ltrch\fcs0 
\fs16\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 3}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ))}}{\fldrslt }}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0  and }{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  COMMENTS " $e_1e_2+e_3e_2$" }}{\fldrslt }}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\field{\*\fldinst {\rtlch\fcs1 
\af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  EQ }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 e}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \\\hich\af0\dbch\af31505\loch\f0 s\\do5(}{
\rtlch\fcs1 \af0\afs16 \ltrch\fcs0 \fs16\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 1}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 )}{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 e}
{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \\\hich\af0\dbch\af31505\loch\f0 s\\do5(}{\rtlch\fcs1 \af0\afs16 \ltrch\fcs0 \fs16\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 2}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 )+}{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 e}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \\\hich\af0\dbch\af31505\loch\f0 s\\do5(}{\rtlch\fcs1 \af0\afs16 \ltrch\fcs0 
\fs16\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 3}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 )}{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 e}{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \\\hich\af0\dbch\af31505\loch\f0 s\\do5(}{\rtlch\fcs1 \af0\afs16 \ltrch\fcs0 \fs16\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 2}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 )}}{\fldrslt }}
\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  into }{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  COMMENTS " $(
\hich\af0\dbch\af31505\loch\f0 e_1+e_3)e_2$" }}{\fldrslt }}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  EQ (}{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 
\i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 e}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \\\hich\af0\dbch\af31505\loch\f0 s\\do5(}{\rtlch\fcs1 \af0\afs16 \ltrch\fcs0 \fs16\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 1}{\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 )+}{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 e}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \\\hich\af0\dbch\af31505\loch\f0 s\\do5(}{\rtlch\fcs1 
\af0\afs16 \ltrch\fcs0 \fs16\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 3}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ))}{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 e}{
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \\\hich\af0\dbch\af31505\loch\f0 s\\do5(}{\rtlch\fcs1 \af0\afs16 \ltrch\fcs0 \fs16\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 2}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 )}}{\fldrslt }}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  with the help of guards spelled out after keyword \hich\af0\dbch\af31505\loch\f0 when:

\par }\pard \ltrpar\qc \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\par }\pard \ltrpar\qj \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 One may wonder why could not we simply write the above \hich\af0\dbch\af31505\loch\f0 case clause as 
\hich\af0\dbch\af31505\loch\f0 Plus(Times(e,e2), Times(e,e4)) to avoid the guard?  Patterns that permit use of the same variable in them multiple times are called }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
equivalence patterns}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 , while the requirement of absense of such patterns in a \hich\af0\dbch\af31505\loch\f0 language is called }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 
\i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 linearity}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . Unfortunately neither OCaml nor Haskell support such patterns. Miranda[}{\field{\*\fldinst {\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BIB_Miranda85 \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 37}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ] is one of the languages that permits them. 
\par }\pard \ltrpar\qj \fi300\li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 The example above illustrates yet another common pattern matching facil
\hich\af0\dbch\af31505\loch\f0 ity \hich\f0 \endash \loch\f0  }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 nesting of patterns}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
. With a simple expression in the case clause we define a predicate that tests the top-level expression to be tagged with a \hich\af0\dbch\af31505\loch\f0 Plus constructor, while both of its arguments to be marked with \hich\af0\dbch\af31505\loch\f0 
Times constructor, binding their arguments (or potentially pattern matching further) respectively. Note that the visitor design pattern does not provide this level of flexibility and each of the nested tests might have required a new v
\hich\af0\dbch\af31505\loch\f0 isitor to be written. Nesting of patterns like the one above is typically where users resort to }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 type tests}{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \hich\af0\dbch\af31505\loch\f0  and }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 type cast}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
 that in case of C++ can be combined into a single call to \hich\af0\dbch\af31505\loch\f0 dynamic\\s\\do5(}{\rtlch\fcs1 \af0\afs16 \ltrch\fcs0 \fs16\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 c}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 )ast.
\par \hich\af0\dbch\af31505\loch\f0 Related to nested patterns are }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 as-patterns}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
 that help one take a value apart while still maintaining its integrity. The following rule could have been a part of a hypotetical rewriting system in OCaml similar to the one above. Its intention is to rewrite expressions of the form }
{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  COMMENTS\hich\af0\dbch\af31505\loch\f0  " $\\frac\{e_1/e_2\}\{e_3/e_4\}$" }}{\fldrslt }}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\field{\*\fldinst {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  EQ  \\F(}{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 e}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \\\hich\af0\dbch\af31505\loch\f0 s\\
do5(}{\rtlch\fcs1 \af0\afs16 \ltrch\fcs0 \fs16\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 1}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 )/}{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 e}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \\\hich\af0\dbch\af31505\loch\f0 s\\do5(}{\rtlch\fcs1 \af0\afs16 \ltrch\fcs0 \fs16\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 2}{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ),}{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 e}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \\\hich\af0\dbch\af31505\loch\f0 s\\do5(}{\rtlch\fcs1 \af0\afs16 
\ltrch\fcs0 \fs16\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 3}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 )/}{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 e}{\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid13506751 \\\hich\af0\dbch\af31505\loch\f0 s\\do5(}{\rtlch\fcs1 \af0\afs16 \ltrch\fcs0 \fs16\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 4}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ))}}{\fldrslt }}
\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  into }{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  COMMENTS " $\\frac\{e_1\}\{
e_2\}\\frac\{e_4\}\{e_3\} \\wedge e_2\\neq0 \\wedge e_3\\neq0 \\wedge e_4\\neq0$" }}{\fldrslt }}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  EQ  \\F(}{
\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 e}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \\\hich\af0\dbch\af31505\loch\f0 s\\do5(}{\rtlch\fcs1 \af0\afs16 \ltrch\fcs0 \fs16\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 1}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ),}{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 e}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \\
\hich\af0\dbch\af31505\loch\f0 s\\do5(}{\rtlch\fcs1 \af0\afs16 \ltrch\fcs0 \fs16\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 2}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 )) \\F(}{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 
\i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 e}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \\\hich\af0\dbch\af31505\loch\f0 s\\do5(}{\rtlch\fcs1 \af0\afs16 \ltrch\fcs0 \fs16\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 4}{\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ),}{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 e}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \\\hich\af0\dbch\af31505\loch\f0 s\\do5(}{\rtlch\fcs1 
\af0\afs16 \ltrch\fcs0 \fs16\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 3}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ))}{\rtlch\fcs1 \af34 \ltrch\fcs0 \f34\insrsid13506751 \loch\af34\dbch\af31505\hich\f34 \u8743\'3f}
{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 e}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \\\hich\af0\dbch\af31505\loch\f0 s\\do5(}{\rtlch\fcs1 \af0\afs16 \ltrch\fcs0 \fs16\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 2}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 )\loch\af0\dbch\af31505\hich\f0 \u8800\'3f0}{\rtlch\fcs1 \af34 \ltrch\fcs0 \f34\insrsid13506751 \loch\af34\dbch\af31505\hich\f34 \u8743\'3f}{
\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 e}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \\\hich\af0\dbch\af31505\loch\f0 s\\do5(}{\rtlch\fcs1 \af0\afs16 \ltrch\fcs0 \fs16\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 3}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 )\loch\af0\dbch\af31505\hich\f0 \u8800\'3f0}{\rtlch\fcs1 \af34 \ltrch\fcs0 \f34\insrsid13506751 \loch\af34\dbch\af31505\hich\f34 \u8743\'3f}{
\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 e}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \\\hich\af0\dbch\af31505\loch\f0 s\\do5(}{\rtlch\fcs1 \af0\afs16 \ltrch\fcs0 \fs16\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 4}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 )\loch\af0\dbch\af31505\hich\f0 \u8800\'3f0}}{\fldrslt }}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 .
\par }\pard \ltrpar\qc \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\par }\pard \ltrpar\qj \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 \hich\f0 We introduced a name \'93\loch\f0 \hich\f0 numerator\'94\loch\f0 
 as a synonym of the result of matching the entire sub-expression \hich\af0\dbch\af31505\loch\f0 Divide(\\s\\do5(}{\rtlch\fcs1 \af0\afs16 \ltrch\fcs0 \fs16\insrsid13506751 ,}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
)e2) in order to refer \hich\af0\dbch\af31505\loch\f0 it without recomposing in the right-hand side of the case clause. We omitted the conjunction of relevant non-zero checks for brevity, one can see that we will need access to 
\hich\af0\dbch\af31505\loch\f0 e2 in it however.
\par }\pard \ltrpar\qj \fi300\li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Decomposing algebraic data types\hich\af0\dbch\af31505\loch\f0 
 through pattern matching has an important drawback that was originally spoted by Wadler[}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BIB_Wadler87 \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 40}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
]: they expose concrete representation of an abstract data type, which conflicts with the principle of }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 data abstraction}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 . To overco\hich\af0\dbch\af31505\loch\f0 me the problem he proposed the notion of }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 views}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0  that represent conversions between different representations that are implicitly applied during pattern matching. As an example, imagine polar and cartesian representations of complex numbers. A user might cho
\hich\af0\dbch\af31505\loch\f0 ose polar representation as a concrete representation for the abstract data type \hich\af0\dbch\af31505\loch\f0 complex, treating cartesian representation as view or vice versa:}{\rtlch\fcs1 \af0 \ltrch\fcs0 
\cs58\super\insrsid13506751\charrsid7474908 \chftn {\footnote \ltrpar \pard\plain \ltrpar\s54\ql \fi-113\li397\ri0\widctlpar\wrapdefault\faauto\rin0\lin397\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 
\fs20\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \cs58\super\insrsid13506751\charrsid7474908 \chftn }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
 We use Wadler\hich\f0 \rquote \loch\f0 s original paper syntax for this example}}}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\par }\pard \ltrpar\qc \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\par }\pard \ltrpar\qj \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
The user might than choose to implement operations in whatever representation is the most suitable, while the compiler will implicitly convert representation if needed:
\par }\pard \ltrpar\qc \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\par }\pard \ltrpar\qj \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 The idea of views were later adopted in various forms in several languages: Haskell[}{\field{\*\fldinst {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BIB_views96 \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 5}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ], Standard ML[}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BIB_views98 \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 28}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ], Scala[}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BIB_EmirThesis \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 10}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ] in the form of }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 extractors}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  and F}
{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  COMMENTS " $\\sharp$" }}{\fldrslt }}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\loch\af0\dbch\af31505\hich\f0 \u9839\'3f\hich\af0\dbch\af31505\loch\f0 [}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BIB_Syme07 \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 7}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ] under the name of }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 active patterns}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 .
\par }\pard \ltrpar\qj \fi300\li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
Logic programming languages like Prolog take pattern matching to even greater level. The main difference between pattern matching in logic languages and \hich\af0\dbch\af31505\loch\f0 \hich\f0 functional languages is that functional pattern matching is a 
\'93\loch\f0 \hich\f0 one-way\'94\loch\f0 \hich\f0  matching where patterns are matched against values, possibly binding some variables in the pattern along the way. Pattern matching in logic programming is \'93\loch\f0 \hich\f0 two-way\'94\loch\f0 
 matching based on }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 u\hich\af0\dbch\af31505\loch\f0 nification}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
 where patterns can be matched against other patterns, possibly binding some variables in both patterns and potentially leaving some variables }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 unbound}{\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  or partially bound \hich\f0 \endash \loch\f0  i.e. bound to patterns. A hypothetical example of such functionality can b\hich\af0\dbch\af31505\loch\f0 e matching a pattern 
\hich\af0\dbch\af31505\loch\f0 Plus(x,Times(x,1)) against another pattern \hich\af0\dbch\af31505\loch\f0 Plus(Divide(y,2),z), which will result in binding \hich\af0\dbch\af31505\loch\f0 x to a \hich\af0\dbch\af31505\loch\f0 Divide(
\hich\af0\dbch\af31505\loch\f0 y,2) and \hich\af0\dbch\af31505\loch\f0 z to \hich\af0\dbch\af31505\loch\f0 Times(Divide(y,2),1) with \hich\af0\dbch\af31505\loch\f0 y left unbound, leaving both \hich\af0\dbch\af31505\loch\f0 x and 
\hich\af0\dbch\af31505\loch\f0 z effectively a patte\hich\af0\dbch\af31505\loch\f0 rn.
\par }\pard\plain \ltrpar\s2\ql \li0\ri0\sb240\sa120\keepn\widctlpar\wrapdefault\faauto\outlinelevel1\rin0\lin0\itap0 \rtlch\fcs1 \ab\af0\afs32\alang1025 \ltrch\fcs0 
\b\fs32\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 {\*\bkmkstart BMsec_pm}\hich\af0\dbch\af31505\loch\f0 3{\*\bkmkend BMsec_pm}\hich\af0\dbch\af31505\loch\f0 
  Pattern Matching for C++
\par }\pard\plain \ltrpar\qj \li0\ri0\sb60\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
Interestingly enough C++ has a pure functional sublanguage in it that has a striking similarity to ML and Haskell. The sublanguage in question is template facilities of C++ that has been shown to be turing co\hich\af0\dbch\af31505\loch\f0 mplete[}
{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BIB_veldhuizen_templates_turing_complete \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 39}}}
\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ]. In fact there were attempts to use Haskell as a pseudocode language for template metaprogramming in C++[}{\field{\*\fldinst {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BIB_Milewski11 \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 23}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ]. A key observation in this analogy i\hich\af0\dbch\af31505\loch\f0 
s that partial and explicit template specialization of C++ class templates are similar to defining equations for Haskell functions. Consider as an example the above factorial function expressed in terms of compile-time pattern matching facilities of C++:

\par }\pard \ltrpar\qc \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\par }\pard \ltrpar\qj \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
Coincidentaly, we use this compile-time pattern matching facility as a meta-language to implement its run-time counterpart.
\par }\pard \ltrpar\qj \fi300\li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 A place where C++ does have a primitive run-time pattern matching is the cat
\hich\af0\dbch\af31505\loch\f0 ch clause of exception handling. The order of clauses matters, which is similar to the order of patterns. 
\par }\pard\plain \ltrpar\s3\ql \li0\ri0\sb120\sa120\keepn\widctlpar\wrapdefault\faauto\outlinelevel2\rin0\lin0\itap0 \rtlch\fcs1 \ab\af0\afs32\alang1025 \ltrch\fcs0 
\b\fs32\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 3.1  Algebraic Datatypes in C++
\par }\pard\plain \ltrpar\qj \li0\ri0\sb60\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Functional programming community algebraic data type (sometimes also called a variant type[1]) is a datatype each of \hich\af0\dbch\af31505\loch\f0 
whose values is data from other datatypes wrapped in one of the constructors of the datatype. Any wrapped datum is an argument to the constructor. In contrast to other datatypes, the constructor is not executed and the only way to operate on the data is t
\hich\af0\dbch\af31505\loch\f0 o\hich\af0\dbch\af31505\loch\f0  unwrap the constructor using pattern matching.
\par }\pard \ltrpar\qj \fi300\li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 There are at least 3 different ways to represent them in C++ We unify syntax 
\par \hich\af0\dbch\af31505\loch\f0 An ML datatype of the form 
\par }\pard \ltrpar\qc \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\par }\pard \ltrpar\qj \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Can be encoded in C++ in at least the 4 following ways:
\par }\pard \ltrpar\qj \fi300\li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
The important difference between algebraic data types and classes in C++ is that algebraic data types are closed and once constructors have been defined, no new constructors can be added. C++ classes \hich\af0\dbch\af31505\loch\f0 
on the other hand are always open: user may extend any class with a new constructor. Work on extensible data types exist[}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BIB_ExtensibleDatatypes \\
* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 14}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 , }{\field{\*\fldinst {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BIB_LohHinze2006 \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 21}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ]
\par \hich\af0\dbch\af31505\loch\f0 The result of invoking \hich\af0\dbch\af31505\loch\f0 m\hich\af0\dbch\af31505\loch\f0 atch<T>(a,b,c) is a }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 pattern}{\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
 that can be applied to a given instance of any type U, that is related by inheritance to T (i.e. is a base of, derived from or a sibling of). Applying given pattern to an instance returns a pointer to type T if matching succeeds
\hich\af0\dbch\af31505\loch\f0  along with binding all the variables and subexpressions the pattern was created with.
\par ---------------
\par \hich\af0\dbch\af31505\loch\f0 Similarly to Haskell, we employ }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 first-fit}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
 pattern matching under which the equations are matched linearly from top to bottom. This is why putting Otherwi\hich\af0\dbch\af31505\loch\f0 se() not at the end of the switch statement will effectively close all subsequent equations.
\par \hich\af0\dbch\af31505\loch\f0 We first present informally the pattern matching facilities our library exposes.
\par \hich\af0\dbch\af31505\loch\f0 Let\hich\f0 \rquote \loch\f0 s assume we have a simple class hierarchy of shapes:
\par }\pard \ltrpar\qc \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\par }\pard \ltrpar\qj \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
Before the library can be used, the user has to provide decomposition into a tuple of all the data structures against which pattern matching will be performed. This is done through specializing traits-like class match_member\hich\af0\dbch\af31505\loch\f0 
s:
\par }\pard \ltrpar\qc \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\par }\pard \ltrpar\qj \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
The first argument of CM represent a position, while the second argument represents the member of the class that will be matched against in that position. Members don\hich\f0 \rquote \loch\f0 t have to be data members onl\hich\af0\dbch\af31505\loch\f0 
y, but can also be nullary member functions providing access to given subcomponent (as Circle::get_center above). With these definition we can write our first function using pattern matching.
\par }\pard \ltrpar\qc \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\par }\pard \ltrpar\qj \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Unfortu\hich\af0\dbch\af31505\loch\f0 
nately we have to predeclare variables as we are in a library setting and cannot change the compiler, while C++ requires all the variables to be forward declared. The binding of variables though works exactly as in other languages. One may have noticed th
\hich\af0\dbch\af31505\loch\f0 a\hich\af0\dbch\af31505\loch\f0 
t the wildcard has to be predeclared as well. This is not required as the library may provide a global variable with such name, we just wanted to mention here that the name of the meta variable may be arbitrary, it is its type that triggers the proper mat
\hich\af0\dbch\af31505\loch\f0 c\hich\af0\dbch\af31505\loch\f0 hing behavior.
\par }\pard \ltrpar\qj \fi300\li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 TODO: Discuss exceptions while accessing members
\par \hich\af0\dbch\af31505\loch\f0 We note that our approach is not limited to handling only these specific representations of algebraic datatypes in C++, but can be applied to any class hierarchy, viewing patternm matching as \hich\af0\dbch\af31505\loch\f0 
a generalization of dynamic_cast.
\par }\pard\plain \ltrpar\s3\ql \li0\ri0\sb120\sa120\keepn\widctlpar\wrapdefault\faauto\outlinelevel2\rin0\lin0\itap0 \rtlch\fcs1 \ab\af0\afs32\alang1025 \ltrch\fcs0 
\b\fs32\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 3.2  Guards
\par }\pard\plain \ltrpar\qj \li0\ri0\sb60\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 The following pattern will match circles with any center but only those whose radius is greater than 3 and smaller than 5. The value of the radius of such matching Circle will be bound to r.
\par }\pard \ltrpar\qc \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\par }\pard \ltrpar\qj \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
The expression in the guard can be arbitrarily complicated and unlike the pattern itself, the variables might be mentioned several times as by the time the guard is going to be evaluated, the variable will be bound. Th\hich\af0\dbch\af31505\loch\f0 e 
\hich\f0 \emdash \loch\f0 
= operator that defines the guard was chosen arbitrarily from those that have pretty low precedence in C++ in order to allow most of the other operators be used in the condition part (right hand side) without parenthesis. The variable in the left hand 
\hich\af0\dbch\af31505\loch\f0 s\hich\af0\dbch\af31505\loch\f0 
ide of the guard operator is the one that will be bound by the pattern. The condition part of the guard may include only this variable and the variables bound in preceeding positions. For example:
\par }\pard \ltrpar\qc \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\par }\pard \ltrpar\qj \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Th\hich\af0\dbch\af31505\loch\f0 is code will effectively match circles with the center on the line }
{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  COMMENTS " $y=x$" }}{\fldrslt }}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 y}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 =}{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 x}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 . Note that the more straitforward notation:
\par }\pard \ltrpar\qc \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\par }\pard \ltrpar\qj \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 is invalid in most of the languages as it uses the same variabl\hich\af0\dbch\af31505\loch\f0 
e twice in the binding position. This can be given a semantics that the first use is the binding use, while the second one is the use as a bound value, but one would have to argue it won\hich\f0 \rquote \loch\f0 
t lead to confusion and mistakes in more complicated expressions.
\par }\pard \ltrpar\qj \fi300\li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 The\hich\af0\dbch\af31505\loch\f0 
 important bit about our implementation of guards is that variables used in guards have to be explicitly wrapped into \hich\af0\dbch\af31505\loch\f0 
variable<> template in order to let the library build the corresponding expression template. The convenient notion that \hich\af0\dbch\af31505\loch\f0 
allowed us to use normal variables inside matches seen before will not work for guards as the expression would simply be evaluated using the C++ semantics and the resulting value will be passed to the match function as the value (and not the expression) w
\hich\af0\dbch\af31505\loch\f0 e\hich\af0\dbch\af31505\loch\f0  would like to match against.
\par \hich\af0\dbch\af31505\loch\f0 We chose to provide syntax for guards directly in binding expressions in order to make sure we can determine certain pattern doesn\hich\f0 \rquote \loch\f0 
t match as soon as possible and thus not have to compute matching for subsequent arguments. An \hich\af0\dbch\af31505\loch\f0 alternative syntax for guards used in other languages is after the entire match expression, using traditional predicates.
\par }\pard\plain \ltrpar\s3\ql \li0\ri0\sb120\sa120\keepn\widctlpar\wrapdefault\faauto\outlinelevel2\rin0\lin0\itap0 \rtlch\fcs1 \ab\af0\afs32\alang1025 \ltrch\fcs0 
\b\fs32\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 3.3  The (in)famous n+k patterns
\par }\pard\plain \ltrpar\qj \li0\ri0\sb60\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Similarly to Haskell (until 2010), w\hich\af0\dbch\af31505\loch\f0 e provide support for the n+k patterns. With them one can define factorial in the following way:
\par }\pard \ltrpar\qc \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\par }\pard \ltrpar\qj \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Unlike Haskell however, our patterns are not limited n+k form only and are generalized to any invertib
\hich\af0\dbch\af31505\loch\f0 le operations. The definition of fast algorithm that computes x to the power of n can be written as following in the library:
\par }\pard \ltrpar\qc \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\par }\pard \ltrpar\qj \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Another typical example that appears in the context of discussions about \hich\af0\dbch\af31505\loch\f0 
generalizing n+k patterns in Haskell is fast fibbonaci algorithm given below:
\par }\pard \ltrpar\qc \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\par }\pard \ltrpar\qj \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
Interestingly enought instead of generalization, the n+k patterns were made obsolete in Haskell as of 2010[}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BIB_Haskel\hich\af0\dbch\af31505\loch\f0 
DocMakingThis \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 HaskelDocMakingThis}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 ]. This was result of many discussions trying to provide semantics to them in the context of user defined types. Here, we are not claiming to solve the relevant discussions, but instead are making sure tha
\hich\af0\dbch\af31505\loch\f0 t our solution is transparent in such a way that we can use the C++0x forthcoming concept mechanism to deal with relevant issues. In particular when having a generalized n+k pattern on \hich\af0\dbch\af31505\loch\f0 
variable<T> we try to make sure that 
\par }\pard \ltrpar\qj \fi300\li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Scala uses a ve\hich\af0\dbch\af31505\loch\f0 
ry stylistic approach to disambiguating variables that need to be bound from named constants. In particular they require that named constants start with capital letter while variables start with lowercase letter[}{\field{\*\fldinst {\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BIB_EmirPhd \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 EmirPhd}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 \hich\f0 , \'a7\hich\af0\dbch\af31505\loch\f0 
2.8]. While such a requirement is inline with similar requirements for naming a constructor in various functional languages, this will raise eyebrowse in C++. We thus form our distinction between variables to be bound and values to be matched based on typ
\hich\af0\dbch\af31505\loch\f0 e\hich\af0\dbch\af31505\loch\f0 
 of the expression: expressions that will bind to a reference type are assumed to be used as variables that have to be bound; expressions that will only bind to const reference are assumed to be values that have to be matched instead, even if they are nam
\hich\af0\dbch\af31505\loch\f0 e\hich\af0\dbch\af31505\loch\f0 d.
\par }\pard\plain \ltrpar\s3\ql \li0\ri0\sb120\sa120\keepn\widctlpar\wrapdefault\faauto\outlinelevel2\rin0\lin0\itap0 \rtlch\fcs1 \ab\af0\afs32\alang1025 \ltrch\fcs0 
\b\fs32\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 3.4  Views
\par }\pard\plain \ltrpar\qj \li0\ri0\sb60\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Our extractors are similar to extractors in Scala, which in turn resemble Views proposed for Haskell.
\par }\pard \ltrpar\qj \fi300\li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 TODO: Add discussion of pattern matching in generic code.
\par \hich\af0\dbch\af31505\loch\f0 Our notion of }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 layout}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  is similar to Wadler\hich\f0 \rquote 
\loch\f0 s notion of Case class
\par \hich\af0\dbch\af31505\loch\f0 Discuss layouts a\hich\af0\dbch\af31505\loch\f0 s a way of handling pattern matching for cases of multiple inheritance.
\par }\pard\plain \ltrpar\s2\ql \li0\ri0\sb240\sa120\keepn\widctlpar\wrapdefault\faauto\outlinelevel1\rin0\lin0\itap0 \rtlch\fcs1 \ab\af0\afs32\alang1025 \ltrch\fcs0 
\b\fs32\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 {\*\bkmkstart BMsec_eval}\hich\af0\dbch\af31505\loch\f0 4{\*\bkmkend BMsec_eval}\hich\af0\dbch\af31505\loch\f0 
  Evaluation
\par }\pard\plain \ltrpar\qj \li0\ri0\sb60\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 In this section we evaluate the performance of our solution in comparison to the de facto standard \hich\f0 \endash \loch\f0  visitor design pattern.
\par }\pard \ltrpar\qj \fi300\li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 To evaluate the performan\hich\af0\dbch\af31505\loch\f0 ce of our solution we\hich\f0 \rquote 
\loch\f0 ve taken a working piece of code that operates visitor pattern on a fairly large class hierarchy and reimplemented it using pattern matching.
\par \hich\af0\dbch\af31505\loch\f0 Preliminary evaluation results obtained on synthetic examples are as following:
\par \hich\af0\dbch\af31505\loch\f0 As long as d\hich\af0\dbch\af31505\loch\f0 ynamic cast doesn\hich\f0 \rquote \loch\f0 t have to be invoked (e.g. we do n+k patterns or guards, the overhead is reasonable and is between 15 and 30 persent.
\par \hich\af0\dbch\af31505\loch\f0 As soon as dynamic cast has to be used inside the match, the overhead easily becomes 10 times slower than visitor\hich\f0 \rquote \loch\f0 s sing\hich\af0\dbch\af31505\loch\f0 
le virtual function call. Because of sequential order of tests, the overhead for classes tested later becomes significant, effectively requiring the user to prioritize the order of tests.
\par }\pard\plain \ltrpar\s2\ql \li0\ri0\sb240\sa120\keepn\widctlpar\wrapdefault\faauto\outlinelevel1\rin0\lin0\itap0 \rtlch\fcs1 \ab\af0\afs32\alang1025 \ltrch\fcs0 
\b\fs32\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 {\*\bkmkstart BMsec_dsc}\hich\af0\dbch\af31505\loch\f0 5{\*\bkmkend BMsec_dsc}\hich\af0\dbch\af31505\loch\f0 
  Discussion
\par }\pard\plain \ltrpar\qj \li0\ri0\sb60\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 We considered using smaller types fo\hich\af0\dbch\af31505\loch\f0 r storing line numbers based on our observation that we haven\hich\f0 \rquote \loch\f0 
t found many C++ source files that had more than 65535 lines. This was saving us space for hash tables but resulted in worse performance due to access of smaller words from memory.
\par }\pard \ltrpar\qj \fi300\li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 We also looke\hich\af0\dbch\af31505\loch\f0 d into storing differences between switch\hich\f0 
\rquote \loch\f0 es head line number and case\hich\f0 \rquote \loch\f0 s line number, following the observation that very occasionaly we saw more than 256 cases in a pattern matching switch. This also degraded performance so we did not use it.
\par \hich\af0\dbch\af31505\loch\f0 We would lik\hich\af0\dbch\af31505\loch\f0 e to note that in presence of deeper hierarchy, visitors often implement members by forwarding call to their base, which may incure additional overhead.
\par }\pard\plain \ltrpar\s2\ql \li0\ri0\sb240\sa120\keepn\widctlpar\wrapdefault\faauto\outlinelevel1\rin0\lin0\itap0 \rtlch\fcs1 \ab\af0\afs32\alang1025 \ltrch\fcs0 
\b\fs32\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 {\*\bkmkstart BMsec_rw}\hich\af0\dbch\af31505\loch\f0 6{\*\bkmkend BMsec_rw}\hich\af0\dbch\af31505\loch\f0 
  Related Work
\par }\pard\plain \ltrpar\qj \li0\ri0\sb60\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 A good survey of work on general pattern matching can be found in in a \hich\af0\dbch\af31505\loch\f0 term project paper by Miller[}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 REF BIB_Miller10 \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 24}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 ].
\par }\pard \ltrpar\qj \fi300\li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Great overview of pattern matching in Scala compared to several other languages is presented in[}
{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BIB_ScalaPM \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 32}}}\sectd \ltrsect
\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ].
\par \hich\af0\dbch\af31505\loch\f0 Prop was an attempt to add pattern matching together with algebraic datatypes and other functional features into C++[}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
REF BIB_Prop96 \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 19}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ].

\par \hich\af0\dbch\af31505\loch\f0 JMatch was a similar incentive to add pattern matching to Java.
\par \hich\af0\dbch\af31505\loch\f0 Sankel provides a good educational ov\hich\af0\dbch\af31505\loch\f0 erview of how algebraic datatypes can be implemented in C++[}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 REF BIB_SankelFP10 \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 35}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 , }{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BIB_Sankel10 \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
34}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ]. 
\par \hich\af0\dbch\af31505\loch\f0 Emir\hich\f0 \rquote \loch\f0 s PhD thesis provides an extensive analysis of pattern matching in the context of object-oriented languages[}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 R\hich\af0\dbch\af31505\loch\f0 EF BIB_EmirThesis \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 10}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ].
\par \hich\af0\dbch\af31505\loch\f0 Cook et al used expression templates to implement a query language to Pivot\hich\f0 \rquote \loch\f0 s IPR[}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BIB_iql04 \\
* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 6}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
]. The principal difference of their work from this work is that authors were essentially creating a\hich\af0\dbch\af31505\loch\f0 
 pattern matcher for a given class hierarchy and thus could take the semantics of the entities represented by classes in the hierarchy into account. Our approach is parametrized over class hierarchy and thus provides a rather lower level pattern matching 
\hich\af0\dbch\af31505\loch\f0 f\hich\af0\dbch\af31505\loch\f0 unctionality that lets one simplify work with that hierarchy. One can think of it as a generalized dynamic_cast.
\par \hich\af0\dbch\af31505\loch\f0 In his dissertation, Pirkelbauer provides a different pattern matcher against Pivot\hich\f0 \rquote \loch\f0 s IPR[}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
REF BIB_PirkelbauerThesis \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 30}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 ].
\par \hich\af0\dbch\af31505\loch\f0 Veld\hich\af0\dbch\af31505\loch\f0 huizen discovered a very powerful technique called Expression templates[}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
REF BIB_Veldhuizen95expressiontemplates \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 38}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 ].
\par \hich\af0\dbch\af31505\loch\f0 Other languages that use pattern matching include: ...
\par \hich\af0\dbch\af31505\loch\f0 Dos Reis et al compares functional and imperative approaches to ge\hich\af0\dbch\af31505\loch\f0 neric programming and discusses the role of pattern matching in expressing generic algorithms in the functional approach[}
{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 REF BIB_dos_reis_05_what_is_gp \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 dos\\s\\do5(}{
\rtlch\fcs1 \af0\afs16 \ltrch\fcs0 \fs16\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 r}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 )eis\\s\\do5(}{\rtlch\fcs1 \af0\afs16 \ltrch\fcs0 \fs16\insrsid13506751 0}{\rtlch\fcs1 
\af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 )5\\s\\do5(}{\rtlch\fcs1 \af0\afs16 \ltrch\fcs0 \fs16\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 w}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 )hat\\s\\
do5(}{\rtlch\fcs1 \af0\afs16 \ltrch\fcs0 \fs16\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 i}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 )s\\s\\do5(}{\rtlch\fcs1 \af0\afs16 \ltrch\fcs0 \fs16\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 g}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 )p}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
]. They also demonstrate with\hich\af0\dbch\af31505\loch\f0  an elegant example the amount of boilerplate code necessary to write in C++ in order to describe a sum-functor.k
\par \hich\af0\dbch\af31505\loch\f0 Boost::proto is a library for creating DSL using expression templates.
\par \hich\af0\dbch\af31505\loch\f0 TOM is a pattern matching compiler that adds pattern matching facilitie\hich\af0\dbch\af31505\loch\f0 s to imperative languages such as C, Java, or Eiffel.[}{\field{\*\fldinst {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 REF BIB_Moreau_2003 \\* MERGEFORMAT }}{\fldrslt {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 1}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 ]
\par }\pard\plain \ltrpar\s2\ql \li0\ri0\sb240\sa120\keepn\widctlpar\wrapdefault\faauto\outlinelevel1\rin0\lin0\itap0 \rtlch\fcs1 \ab\af0\afs32\alang1025 \ltrch\fcs0 
\b\fs32\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 {\*\bkmkstart BMsec_fw}\hich\af0\dbch\af31505\loch\f0 7{\*\bkmkend BMsec_fw}\hich\af0\dbch\af31505\loch\f0 
  Future Work
\par }\pard\plain \ltrpar\qj \li0\ri0\sb60\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Describe formally concepts used in our expression templates.
\par }\pard \ltrpar\qj \fi300\li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Find better recursive patterns for sequences.
\par \hich\af0\dbch\af31505\loch\f0 Make patterns more reus\hich\af0\dbch\af31505\loch\f0 able by eliminating variables from those, saved into auto.
\par \hich\af0\dbch\af31505\loch\f0 Multi-threaded environment support.
\par }\pard\plain \ltrpar\s2\ql \li0\ri0\sb240\sa120\keepn\widctlpar\wrapdefault\faauto\outlinelevel1\rin0\lin0\itap0 \rtlch\fcs1 \ab\af0\afs32\alang1025 \ltrch\fcs0 
\b\fs32\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 {\*\bkmkstart BMsec_cc}\hich\af0\dbch\af31505\loch\f0 8{\*\bkmkend BMsec_cc}\hich\af0\dbch\af31505\loch\f0 
  Conclusions
\par }\pard\plain \ltrpar\qj \li0\ri0\sb60\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 In this work we describe design and implementation of a library that brings pattern matching facilities similar to those of functi\hich\af0\dbch\af31505\loch\f0 
onal programming languages into C++. Our solution does not requre any changes to the compiler and in its main part can be implemented in the standard C++98. Several extensions might require use of C++0x features, readily available in todays mainstream com
\hich\af0\dbch\af31505\loch\f0 p\hich\af0\dbch\af31505\loch\f0 
ilers. The solution is non-intrusive and can be applied to any given class taxonomy retroactively. Its main utility lays in avoiding the control inversion problem typical to Visitor Design Pattern, which results in more clear, direct and much more conscie
\hich\af0\dbch\af31505\loch\f0 c\hich\af0\dbch\af31505\loch\f0 
e code. Our evaluation demonstrates that the solution scales to real-sized projects, while the performance results show that it comes close to its hand-crafted visitor alternative. The main novelty of the paper is in generalizing Haskell\hich\f0 \rquote 
\loch\f0 s n+k patterns to\hich\af0\dbch\af31505\loch\f0  \hich\af0\dbch\af31505\loch\f0 
any invertible operations and demonstrating how to do it generically in a library setting. Backward semantics of expression templates used to implement this feature is also to the best of our knowledge first application of backward semantics to expression
\hich\af0\dbch\af31505\loch\f0  \hich\af0\dbch\af31505\loch\f0 templates.
\par }\pard\plain \ltrpar\s2\ql \li0\ri0\sb240\sa120\keepn\widctlpar\wrapdefault\faauto\outlinelevel1\rin0\lin0\itap0 \rtlch\fcs1 \ab\af0\afs32\alang1025 \ltrch\fcs0 
\b\fs32\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 9  ToDo
\par }\pard\plain \ltrpar\s47\ql \fi-300\li600\ri0\sb50\sa120\widctlpar\tx283\wrapdefault\faauto\rin0\lin600\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \bullet \tab \hich\af0\dbch\af31505\loch\f0 Separate sequential, random, repetitive into separate test programs and make one that combines them all. This is to test PGO effectiveness. 
\par \bullet \tab \hich\af0\dbch\af31505\loch\f0 Proof that recomputations of irrelevant won\hich\f0 \rquote \loch\f0 t be done forever and will stabilize 
\par \bullet \tab \hich\af0\dbch\af31505\loch\f0 Instrume\hich\af0\dbch\af31505\loch\f0 nt existing apps to see VTBL behavior 
\par \bullet \tab \hich\af0\dbch\af31505\loch\f0 Finish experimenting with congruence hierarchy 
\par \bullet \tab \hich\af0\dbch\af31505\loch\f0 Justification/proof from Itanium ABI for our approach 
\par \bullet \tab \hich\af0\dbch\af31505\loch\f0 Multiple dispatch switch 
\par \bullet \tab \hich\af0\dbch\af31505\loch\f0 Different values of the same dynamic type 
\par \bullet \tab \hich\af0\dbch\af31505\loch\f0 FIX: Value th\hich\af0\dbch\af31505\loch\f0 at would match type but wouldn\hich\f0 \rquote \loch\f0 t match condition may slow down execution significantly. We need exit from switch instead of fall through 

\par \bullet \tab \hich\af0\dbch\af31505\loch\f0 Lock-free version to be used in multi-threaded environments. 
\par \bullet \tab \hich\af0\dbch\af31505\loch\f0 Emir\hich\f0 \rquote \loch\f0 s PhD thesis has measurements, compare to those\hich\af0\dbch\af31505\loch\f0 . 
\par }\pard\plain \ltrpar\qj \li0\ri0\sb60\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Discuss: Separating matching arguments from selector prevents us from optimizing for some obvious but typical cases when type 
\par }\pard \ltrpar\qj \fi300\li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
Discuss: Visual C++ seems to generate better visitors code: 185 vs 222 units for GCC. GCC seems to generate better matching co\hich\af0\dbch\af31505\loch\f0 
de: 208 vs 209 units for Visual C++. 64 bit code in Visual C++ actually becomes faster: 143(x64) vs 185(w32) for visitors and 196(x64) vs 209(w32) for pattern matching. We can\hich\f0 \rquote \loch\f0 
t at the moment generate 64bit GCC code. Unlike GCC, we could not find a way to\hich\af0\dbch\af31505\loch\f0  \hich\af0\dbch\af31505\loch\f0 do branch hinting for Visual C++.
\par \hich\af0\dbch\af31505\loch\f0 MS Visual C++ 10
\par \hich\af0\dbch\af31505\loch\f0 32 \hich\f0 \emdash \loch\f0  Visitors \hich\f0 \emdash \loch\f0  Matching 64 \hich\f0 \emdash \loch\f0  Visitors \hich\f0 \emdash \loch\f0  Matching -------------------------- -------------------------- SEQ \hich\f0 
\emdash \loch\f0  185 \hich\f0 \emdash \loch\f0  209 SEQ \hich\f0 \emdash \loch\f0  145 \hich\f0 \emdash \loch\f0  190 RND \hich\f0 \emdash \loch\f0  186 \hich\f0 \emdash \loch\f0  208 RND \hich\f0 \emdash \loch\f0  143 \hich\f0 \emdash \loch\f0  196 

\par \hich\af0\dbch\af31505\loch\f0 GCC 4.5.2
\par \hich\af0\dbch\af31505\loch\f0 32 \hich\f0 \emdash \loch\f0  Visitors \hich\f0 \emdash \loch\f0  Matching 6\hich\af0\dbch\af31505\loch\f0 4 \hich\f0 \emdash \loch\f0  Visitors \hich\f0 \emdash \loch\f0 
 Matching -------------------------- -------------------------- SEQ \hich\f0 \emdash \loch\f0  215 \hich\f0 \emdash \loch\f0  189 SEQ \hich\f0 \emdash \loch\f0  \hich\f0 \emdash \loch\f0  RND \hich\f0 \emdash \loch\f0  222 \hich\f0 \emdash \loch\f0 
 208 RND \hich\f0 \emdash \loch\f0  \hich\f0 \emdash \loch\f0  
\par }\pard\plain \ltrpar\s2\ql \li0\ri0\sb240\sa120\keepn\widctlpar\wrapdefault\faauto\outlinelevel1\rin0\lin0\itap0 \rtlch\fcs1 \ab\af0\afs32\alang1025 \ltrch\fcs0 
\b\fs32\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 10  Acknowledgements
\par }\pard\plain \ltrpar\qj \li0\ri0\sb60\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Gregory Berkolaiko for entropy idea. Jaakko Jarvi for Haskell help. Andrew Sutton for suggestions. Jasson Ca\hich\af0\dbch\af31505\loch\f0 ssey for branch hinting. Mani Zandifar for PAPI help.
\par }\pard\plain \ltrpar\s2\ql \li0\ri0\sb240\sa120\keepn\widctlpar\wrapdefault\faauto\outlinelevel1\rin0\lin0\itap0 \rtlch\fcs1 \ab\af0\afs32\alang1025 \ltrch\fcs0 
\b\fs32\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 11  Scratch
\par }\pard\plain \ltrpar\s51\ql \li0\ri0\sb180\sa120\keepn\widctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \ab\af0\afs32\alang1025 \ltrch\fcs0 \b\fs32\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 References
\par }\pard\plain \ltrpar\s52\ql \fi-450\li450\ri0\sb60\widctlpar\wrapdefault\faauto\rin0\lin450\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\af0\hich\af0\dbch\af31505\cgrid\noproof\langnp1033\langfenp1033 {\rtlch\fcs1 
\af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_Moreau_2003}\hich\af0\dbch\af31505\loch\f0 1{\*\bkmkend BIB_Moreau_2003}\hich\af0\dbch\af31505\loch\f0 ]\tab : .
\par }\pard \ltrpar\s52\ql \fi-450\li450\ri0\widctlpar\wrapdefault\faauto\rin0\lin450\itap0 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_Clang}\hich\af0\dbch\af31505\loch\f0 2{\*\bkmkend BIB_Clang}
\hich\af0\dbch\af31505\loch\f0 ]\tab (2007): }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 clang: a C language family frontend for LLVM}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . }
{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid13506751 \hich\af2\dbch\af31505\loch\f2 http://clang.llvm.org/}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 .
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_Burstall69provingproperties}\hich\af0\dbch\af31505\loch\f0 3{\*\bkmkend BIB_Burstall69provingproperties}\hich\af0\dbch\af31505\loch\f0 ]\tab R.\~M. Burstall (1969): }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 
\i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Proving Properties of Programs by Structural Induction}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 Computer Journal}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  .
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_BMS80}\hich\af0\dbch\af31505\loch\f0 4{\*\bkmkend BIB_BMS80}\hich\af0\dbch\af31505\loch\f0 ]\tab R.\~M. Burstall, D.\~B. MacQueen & D.\~T. Sannella (1980): }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 
\i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 HOPE: An experimental applicative language}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . In:\hich\af0\dbch\af31505\loch\f0  }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 
\i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Proceedings of the 1980 ACM conference on LISP and functional programming}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 , LFP \hich\f0 \rquote \loch\f0 
80, ACM, New York, NY, USA, pp. 136\hich\f0 \endash \loch\f0 143, doi:}{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid13506751 \hich\af2\dbch\af31505\loch\f2 http://doi.acm.org/10.1145/800087.802799}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 . Available at }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid13506751 \hich\af2\dbch\af31505\loch\f2 http://doi.acm.org/10.1145/800087.802799}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 .
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_views96}\hich\af0\dbch\af31505\loch\f0 5{\*\bkmkend BIB_views96}\hich\af0\dbch\af31505\loch\f0 ]\tab W.\~Burt\hich\af0\dbch\af31505\loch\f0 on, E.\~Meijer, P.\~Sansom, S.\~Thompson & P.\~Wadler (1996): }{
\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Views: an extension to haskell pattern matching}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  .
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_iql04}\hich\af0\dbch\af31505\loch\f0 6{\*\bkmkend BIB_iql04}\hich\af0\dbch\af31505\loch\f0 ]\tab Stephen Cook, Damian Dechev & Peter Pirkelbauer (2004): }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 
\i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 The IPR Query Language}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . Technical Report, Texas A&M University. Availa\hich\af0\dbch\af31505\loch\f0 ble at }{\rtlch\fcs1 
\af2 \ltrch\fcs0 \f2\insrsid13506751 \hich\af2\dbch\af31505\loch\f2 http://parasol.tamu.edu/pivot/}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 .
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_Syme07}\hich\af0\dbch\af31505\loch\f0 7{\*\bkmkend BIB_Syme07}\hich\af0\dbch\af31505\loch\f0 ]\tab Sy\~Don, Gregory Neverov & James Margetson (2007): }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 Extensible pattern matching via a lightweight language extension}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . In: }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 Proceedings of the 12th ACM SIGPLAN international conference on Functiona\hich\af0\dbch\af31505\loch\f0 l programming}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 , ICFP \hich\f0 \rquote 
\loch\f0 07, ACM, New York, NY, USA, pp. 29\hich\f0 \endash \loch\f0 40, doi:}{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid13506751 \hich\af2\dbch\af31505\loch\f2 http://doi.acm.org/10.1145/1291151.1291159}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 . Available at }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid13506751 \hich\af2\dbch\af31505\loch\f2 http://doi.acm.org/10.1145/1291151.1291159}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 .
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_DRJ05}\hich\af0\dbch\af31505\loch\f0 8}{\rtlch\fcs1 \af279 \ltrch\fcs0 \f279\insrsid13506751 {\*\bkmkend BIB_DRJ05}\hich\af279\dbch\af31505\loch\f279 ]\tab Gabriel Dos\~\hich\f279 Reis & Jaakko J\'e4
\loch\f279 rvi (2005): }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 What is Generic Programming? }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  In: }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 
\i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Proceedings of the First International Workshop of Library-Centric Software Design (LCSD\~\hich\f0 \rquote \loch\f0 05). An OOPSLA \hich\f0 \rquote \loch\f0 05 workshop}{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 .
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_haskell2010}\hich\af0\dbch\af31505\loch\f0 9{\*\bkmkend BIB_haskell2010}\hich\af0\dbch\af31505\loch\f0 ]\tab Simon\~Marlow (editor) (2010): }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 Haskell 2010 Language Report}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid13506751 \hich\af2\dbch\af31505\loch\f2 
http://www.haskell.org/onlinereport/ha\hich\af2\dbch\af31505\loch\f2 skell2010/}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 .
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_EmirThesis}\hich\af0\dbch\af31505\loch\f0 10{\*\bkmkend BIB_EmirThesis}\hich\af0\dbch\af31505\loch\f0 ]\tab Burak Emir (2007): }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 Object-oriented pattern matching}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . Ph.D. thesis, Lausanne, doi:}{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid13506751 \hich\af2\dbch\af31505\loch\f2 
10.5075/epfl-thesis-3899}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . Available at }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid13506751 \hich\af2\dbch\af31505\loch\f2 http://library.epfl.ch/theses/? nr=3899}{\rtlch\fcs1 
\af0 \ltrch\fcs0 \insrsid13506751 .
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_SNOBOL64}\hich\af0\dbch\af31505\loch\f0 11{\*\bkmkend BIB_SNOBOL64}\hich\af0\dbch\af31505\loch\f0 ]\tab D.\~J. Farber, R.\~\hich\af0\dbch\af31505\loch\f0 E. Griswold & I.\~P. Polonsky (1964): }{
\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 SNOBOL , A String Manipulation Language}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 J. ACM}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  11, pp. 21\hich\f0 \endash \loch\f0 30, doi:}{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid13506751 \hich\af2\dbch\af31505\loch\f2 
http://doi.acm.org/10.1145/321203.321207}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . Available at }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid13506751 \hich\af2\dbch\af31505\loch\f2 
http://doi.acm.org/10.1145/321203.321207}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 .
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_DesignPatterns1993}\hich\af0\dbch\af31505\loch\f0 12{\*\bkmkend BIB_DesignPatterns1993}\hich\af0\dbch\af31505\loch\f0 ]\tab Erich \hich\af0\dbch\af31505\loch\f0 Gamma, Richard Helm, Ralph\~
E. Johnson & John\~M. Vlissides (1993): }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Design Patterns: Abstraction and Reuse of Object-Oriented Design}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 . In: }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Proceedings of the 7th European Conference on Object-Oriented Programming}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 , ECOOP \hich\f0 \rquote \loch\f0 93, Springer-Verlag, London, UK, UK, p\hich\af0\dbch\af31505\loch\f0 p. 406\hich\f0 \endash \loch\f0 431. Available at }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid13506751 
\hich\af2\dbch\af31505\loch\f2 http://portal.acm.org/citation.cfm? id=646151.679366}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 .
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_SNOBOL71}\hich\af0\dbch\af31505\loch\f0 13{\*\bkmkend BIB_SNOBOL71}\hich\af0\dbch\af31505\loch\f0 ]\tab J.F. Gimpel (1971): }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 The theory and implementation of pattern matching in SNOBOL4 and other programming languages}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  Bibliography of Numbered SNOBOL4 Do
\hich\af0\dbch\af31505\loch\f0 cuments.
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_ExtensibleDatatypes}\hich\af0\dbch\af31505\loch\f0 14{\*\bkmkend BIB_ExtensibleDatatypes}\hich\af0\dbch\af31505\loch\f0 ]\tab (2009): }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 Extensible datatypes}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid13506751 \hich\af2\dbch\af31505\loch\f2 
http://www.haskell.org/haskellwiki/Extensible_datatypes}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 .
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_C__0x}\hich\af0\dbch\af31505\loch\f0 15{\*\bkmkend BIB_C__0x}\hich\af0\dbch\af31505\loch\f0 ]\tab (2011): }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
Working Draft, Standard for Programming Language C++}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . Technical Report N3291=1\hich\af0\dbch\af31505\loch\f0 
1-0061, ISO/IEC JTC 1, Information Technology, Subcommittee SC 22, Programming Language C++. Available at }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid13506751 \hich\af2\dbch\af31505\loch\f2 http://www.open-std.org/JTC1/sc22/wg21/prot/14882fdis/n3291.pdf}{
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 .
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_Haskell98Book}\hich\af0\dbch\af31505\loch\f0 16{\*\bkmkend BIB_Haskell98Book}\hich\af0\dbch\af31505\loch\f0 ]\tab Simon\~Peyton Jones, editor (2003): }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 Haskell 98 Language and Libraries \hich\f0 \endash \loch\f0  The Revised Report}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . Cambridge University Press, Cambridge, England.
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_Krishnamurthi98}\hich\af0\dbch\af31505\loch\f0 17{\*\bkmkend BIB_Krishnamurthi98}\hich\af0\dbch\af31505\loch\f0 ]\tab Shriram Krishnamurthi, Matthias Felleisen & Daniel Friedman (1998): }{\rtlch\fcs1 
\ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Synthesizing object-oriented and function\hich\af0\dbch\af31505\loch\f0 al design to promote re-use}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
. In Eric Jul, editor: }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 ECOOP\hich\f0 \rquote \loch\f0 98 - Object-Oriented Programming}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 , }{
\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Lecture Notes in Computer Science}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  1445, Springer Berlin / Heidelberg, pp. 91\hich\f0 \endash 
\loch\f0 113. Available at }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid13506751 \hich\af2\dbch\af31505\loch\f2 http://dx.doi.org/10.1007/BFb0054088}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . 10.1007/BFb0054088.
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_HydroJ2003}\hich\af0\dbch\af31505\loch\f0 18{\*\bkmkend BIB_HydroJ2003}\hich\af0\dbch\af31505\loch\f0 ]\tab Keunwoo Lee, Anthony LaMarca & Craig Chambers (2003): }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 
\i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 HydroJ: object-oriented pattern matching for evolvable distributed systems}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . In: }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 
\i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Proceedings of the 18th annual ACM SIGPLAN conference on Object-oriented programing, systems, language\hich\af0\dbch\af31505\loch\f0 s, and applications}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 , OOPSLA \hich\f0 \rquote \loch\f0 03, ACM, New York, NY, USA, pp. 205\hich\f0 \endash \loch\f0 223, doi:}{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid13506751 \hich\af2\dbch\af31505\loch\f2 
http://doi.acm.org/10.1145/949305.949324}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . Available at }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid13506751 \hich\af2\dbch\af31505\loch\f2 
http://doi.acm.org/10.1145/949305.949324}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 .
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_Prop96}\hich\af0\dbch\af31505\loch\f0 19{\*\bkmkend BIB_Prop96}\hich\af0\dbch\af31505\loch\f0 ]\tab Allen Leung (1996): }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
Prop: A C++ based Pattern Matching Langu\hich\af0\dbch\af31505\loch\f0 age}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . Technical Report, Courant Institute of Mathematical Sciences, New York University. Available at }{
\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid13506751 \hich\af2\dbch\af31505\loch\f2 http://www.cs.nyu.edu/leunga/prop.html}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 .
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_Liu03jmatch_iterable}\hich\af0\dbch\af31505\loch\f0 20{\*\bkmkend BIB_Liu03jmatch_iterable}\hich\af0\dbch\af31505\loch\f0 ]\tab Jed Liu & Andrew\~C. Myers (2003): }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 
\i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 JMatch: Iterable Abstract Pa\hich\af0\dbch\af31505\loch\f0 ttern Matching for Java}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . In: }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 
\i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Proceedings of the 5th International Symposium on Practical Aspects of Declarative Languages}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 , PADL \hich\f0 \rquote \loch\f0 
03, Springer-Verlag, London, UK, UK, pp. 110\hich\f0 \endash \loch\f0 127. Available at }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid13506751 \hich\af2\dbch\af31505\loch\f2 http://portal.acm.org/citation.cfm? id=645773.668088}{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 .
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_LohHinze2006}\hich\af0\dbch\af31505\loch\f0 21}{\rtlch\fcs1 \af279 \ltrch\fcs0 \f279\insrsid13506751 {\*\bkmkend BIB_LohHinze2006}\hich\af279\dbch\af31505\loch\f279 ]\tab \hich\f279 Andres L\'f6\loch\f279 
h & Ralf Hinze (2006): }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Open data types and open functions}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . In: }{\rtlch\fcs1 \ai\af0 
\ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Proceedings of the 8th ACM SIGPLAN international conference on Principles and practice of declarative programming}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
, PPDP \hich\f0 \rquote \loch\f0 06, ACM, New York, NY, USA, pp. 133\hich\f0 \endash \hich\af0\dbch\af31505\loch\f0 144, doi:}{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid13506751 \hich\af2\dbch\af31505\loch\f2 http://doi.acm.org/10.1145/1140335.1140352}{
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . Available at }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid13506751 \hich\af2\dbch\af31505\loch\f2 http://doi.acm.org/10.1145/1140335.1140352}{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 .
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_Phoenix}\hich\af0\dbch\af31505\loch\f0 22{\*\bkmkend BIB_Phoenix}\hich\af0\dbch\af31505\loch\f0 ]\tab Microsoft Research (2005): }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 Phoenix Compiler and Shared Source Common Language Infrastructure}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid13506751 
\hich\af2\dbch\af31505\loch\f2 http://research.microsoft\hich\af2\dbch\af31505\loch\f2 .com/phoenix/}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 .
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_Milewski11}\hich\af0\dbch\af31505\loch\f0 23{\*\bkmkend BIB_Milewski11}\hich\af0\dbch\af31505\loch\f0 ]\tab Bartosz Milewski (2011): }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 Haskell - The Pseudocode Language for C++ Template Metaprogramming}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . In: }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 BoostCon\hich\f0 \rquote \loch\f0 11}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . Available at }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid13506751 \hich\af2\dbch\af31505\loch\f2 
http://boostcon.boost.org/2011-resources}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 .
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_Miller10}\hich\af0\dbch\af31505\loch\f0 24{\*\bkmkend BIB_Miller10}\hich\af0\dbch\af31505\loch\f0 ]\tab Dawn Miller (2\hich\af0\dbch\af31505\loch\f0 010): }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 
\i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Pattern Matching}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . Technical Report, California State University Northridge. Available at }{\rtlch\fcs1 \af2 \ltrch\fcs0 
\f2\insrsid13506751 \hich\af2\dbch\af31505\loch\f2 http://www.bruce-shapiro.net/math382/Projects/content/Pattern%20Matching%20Final.pdf}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 .
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_ML90}\hich\af0\dbch\af31505\loch\f0 25{\*\bkmkend BIB_ML90}\hich\af0\dbch\af31505\loch\f0 ]\tab Robin Milner, Mads Tofte & Robert Harper (1990): }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 The D\hich\af0\dbch\af31505\loch\f0 efinition of Standard ML}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . MIT Press, Cambridge, MA, USA.
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_Scala2nd}\hich\af0\dbch\af31505\loch\f0 26{\*\bkmkend BIB_Scala2nd}\hich\af0\dbch\af31505\loch\f0 ]\tab 
Martin Odersky, Vincent Cremet, Iulian Dragos, Gilles Dubochet, Burak Emir, Sean Mcdirmid, Stephane Micheloud, Nikolay Mihaylov, Michel Schinz, Erik Stenman, Lex Spoon & \hich\af0\dbch\af31505\loch\f0 Matthias Zenger (2006): }{\rtlch\fcs1 \ai\af0 
\ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 An overview of the Scala programming language (second edition}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
. Technical Report LAMP-REPORT-2006-001, Ecole Polytechnique Federale de Lausanne.
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_Odersky97pizzainto}\hich\af0\dbch\af31505\loch\f0 27{\*\bkmkend BIB_Odersky97pizzainto}\hich\af0\dbch\af31505\loch\f0 ]\tab Martin Odersky & Philip Wadler (1997): }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 
\i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Pizza into Java: Translating theory into practice}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . In: }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 In Proc. 24th ACM Symposium on Principles of Programming Languages}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 , ACM Press, pp. 146\hich\f0 \endash \loch\f0 159.
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_views98}\hich\af0\dbch\af31505\loch\f0 28{\*\bkmkend BIB_views98}\hich\af0\dbch\af31505\loch\f0 ]\tab Chris Okasaki (1998): }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 Views for Standard ML}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . In: }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Workshop on ML}{\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid13506751 .
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_haskell98}\hich\af0\dbch\af31505\loch\f0 29{\*\bkmkend BIB_haskell98}\hich\af0\dbch\af31505\loch\f0 ]\tab Simon Peyton Jones et\~al. (2003): }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 The Haskell 98 Language and Libraries: The Revised Report}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
Journal of Functional Programming}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  13(1), pp. 0\hich\f0 \endash \loch\f0 255. }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid13506751 \hich\af2\dbch\af31505\loch\f2 
http://www.haskell.org/definition/}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 .
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_PirkelbauerThesis}\hich\af0\dbch\af31505\loch\f0 30{\*\bkmkend BIB_PirkelbauerThesis}\hich\af0\dbch\af31505\loch\f0 ]\tab \hich\af0\dbch\af31505\loch\f0 Peter Pirkelbauer (2010): }{\rtlch\fcs1 \ai\af0 
\ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Programming Language Evolution and Source Code Rejuvenation}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . Ph.D. thesis, Texas A&M University. Available at }{
\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid13506751 \hich\af2\dbch\af31505\loch\f2 http://repository.tamu.edu/handle/1969.1/ETD-TAMU-2010-12-8894}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 .
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_Pivot09}\hich\af0\dbch\af31505\loch\f0 31{\*\bkmkend BIB_Pivot09}\hich\af0\dbch\af31505\loch\f0 ]\tab Gabriel\~Dos Reis & Bjarne Str\hich\af0\dbch\af31505\loch\f0 oustrup (2009): }{\rtlch\fcs1 \ai\af0 
\ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 A Principled, Complete, and Efficient Representation of C++}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . In: }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 
\i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Proc. Joint Conference of ASCM 2009 and MACIS 2009}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 , }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 COE Lecture Notes}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \~\hich\af0\dbch\af31505\loch\f0 22, pp. 407\hich\f0 \endash \loch\f0 421.
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_ScalaPM}\hich\af0\dbch\af31505\loch\f0 32{\*\bkmkend BIB_ScalaPM}\hich\af0\dbch\af31505\loch\f0 ]\tab Michael R"uegg (2010): }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 Pattern Matching in Scala}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . Technical R\hich\af0\dbch\af31505\loch\f0 eport, University of Applied Sciences Rapperswil. Available at }{
\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid13506751 \hich\af2\dbch\af31505\loch\f2 http://www.michaelrueegg.name/doc/papers/pattern_matching_in_scala.pdf}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 .
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_RPS10}\hich\af0\dbch\af31505\loch\f0 33{\*\bkmkend BIB_RPS10}\hich\af0\dbch\af31505\loch\f0 ]\tab Sukyoung Ryu, Changhee Park & Guy L\~Steele Jr (2010): }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 
\i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Adding Pattern Matching to Existing Object-O\hich\af0\dbch\af31505\loch\f0 riented Languages}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . In: }{\rtlch\fcs1 \ai\af0 
\ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 2010 International Workshop on Foundations of Object-Oriented Languages}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . Available at }{\rtlch\fcs1 \af2 
\ltrch\fcs0 \f2\insrsid13506751 \hich\af2\dbch\af31505\loch\f2 http://ecee.colorado.edu/\~siek/FOOL2010/ryu.pdf}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 .
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_Sankel10}\hich\af0\dbch\af31505\loch\f0 34{\*\bkmkend BIB_Sankel10}\hich\af0\dbch\af31505\loch\f0 ]\tab David Sankel (2010): }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 Algebraic Data Types in C++}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . Available at }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid13506751 \hich\af2\dbch\af31505\loch\f2 http:/
\hich\af2\dbch\af31505\loch\f2 /cpp-next.com/archive/2010/09/algebraic-data-types-in-c/}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 .
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_SankelFP10}\hich\af0\dbch\af31505\loch\f0 35{\*\bkmkend BIB_SankelFP10}\hich\af0\dbch\af31505\loch\f0 ]\tab David Sankel (2010): }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 Modern Functional Programming in C++}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . In: }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 BoostCon\hich\f0 
\rquote \loch\f0 10}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . Available at }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid13506751 \hich\af2\dbch\af31505\loch\f2 http://netsuperbrain.com/gfp/funccpp.pdf}{\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid13506751 .
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_SELL}\hich\af0\dbch\af31505\loch\f0 36{\*\bkmkend BIB_SELL}\hich\af0\dbch\af31505\loch\f0 ]\tab Bjarne Strous\hich\af0\dbch\af31505\loch\f0 trup (2005): }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 
\i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 A rationale for semantically enhanced library languages}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . In: }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 LCSD \hich\f0 \rquote \loch\f0 05}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 .
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_Miranda85}\hich\af0\dbch\af31505\loch\f0 37{\*\bkmkend BIB_Miranda85}\hich\af0\dbch\af31505\loch\f0 ]\tab D.\~A. Turner (1985): }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 Miranda: a non-strict functional language with polymorphic types}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . In: }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 Proc. of a conference on Functional programming la\hich\af0\dbch\af31505\loch\f0 nguages and computer architecture}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
, Springer-Verlag New York, Inc., New York, NY, USA, pp. 1\hich\f0 \endash \loch\f0 16. Available at }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid13506751 \hich\af2\dbch\af31505\loch\f2 http://portal.acm.org/citation.cfm? id=5280.5281}{\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid13506751 .
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_Veldhuizen95expressiontemplates}\hich\af0\dbch\af31505\loch\f0 38{\*\bkmkend BIB_Veldhuizen95expressiontemplates}\hich\af0\dbch\af31505\loch\f0 ]\tab Todd Veldhuizen (1995)\hich\af0\dbch\af31505\loch\f0 : 
}{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 Expression Templates}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 C++ Report}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0  7, pp. 26\hich\f0 \endash \loch\f0 31.
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_veldhuizen_templates_turing_complete}\hich\af0\dbch\af31505\loch\f0 39{\*\bkmkend BIB_veldhuizen_templates_turing_complete}\hich\af0\dbch\af31505\loch\f0 ]\tab Todd\~L. Veldhuizen (2003): }{\rtlch\fcs1 
\ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 C++ Templates are Turing complete}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid13506751 
\hich\af2\dbch\af31505\loch\f2 www.osl.iu.edu/\~tveldhui/papers/2003/turing.pdf}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 .
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_Wadler87}\hich\af0\dbch\af31505\loch\f0 40{\*\bkmkend BIB_Wadler87}\hich\af0\dbch\af31505\loch\f0 ]\tab P.\~Wadler (1987): }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 Views: a way for pattern matching to cohabit with data abstraction}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . In: }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 Proceedings of the 14th ACM SIGACT-SIGPLAN symposium on Principles of programming languages}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 , POPL \hich\f0 \rquote \loch\f0 
87, ACM, New York, NY, USA, pp. 307\hich\f0 \endash \loch\f0 313\hich\af0\dbch\af31505\loch\f0 , doi:}{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid13506751 \hich\af2\dbch\af31505\loch\f2 http://doi.acm.org/10.1145/41625.41653}{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . Available at }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid13506751 \hich\af2\dbch\af31505\loch\f2 http://doi.acm.org/10.1145/41625.41653}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 .
\par \hich\af0\dbch\af31505\loch\f0 [{\*\bkmkstart BIB_Zenger_2001}\hich\af0\dbch\af31505\loch\f0 41{\*\bkmkend BIB_Zenger_2001}\hich\af0\dbch\af31505\loch\f0 ]\tab Matthias Zenger & Martin Odersky (2001): }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 Extensible algebraic datatypes with defaults}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 . In: }{\rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\insrsid13506751 \hich\af0\dbch\af31505\loch\f0 
Proceedings of the sixth ACM SI\hich\af0\dbch\af31505\loch\f0 GPLAN international conference on Functional programming}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 \hich\af0\dbch\af31505\loch\f0 , ICFP \hich\f0 \rquote \loch\f0 
01, ACM, New York, NY, USA, pp. 241\hich\f0 \endash \loch\f0 252, doi:}{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid13506751 \hich\af2\dbch\af31505\loch\f2 http://doi.acm.org/10.1145/507635.507665}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 
\hich\af0\dbch\af31505\loch\f0 . Available at }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid13506751 \hich\af2\dbch\af31505\loch\f2 http://doi.acm.org/10.1145/507635.507665}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13506751 .}{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13506751 
\par }{\*\themedata 504b030414000600080000002100e9de0fbfff0000001c020000130000005b436f6e74656e745f54797065735d2e786d6cac91cb4ec3301045f748fc83e52d4a
9cb2400825e982c78ec7a27cc0c8992416c9d8b2a755fbf74cd25442a820166c2cd933f79e3be372bd1f07b5c3989ca74aaff2422b24eb1b475da5df374fd9ad
5689811a183c61a50f98f4babebc2837878049899a52a57be670674cb23d8e90721f90a4d2fa3802cb35762680fd800ecd7551dc18eb899138e3c943d7e503b6
b01d583deee5f99824e290b4ba3f364eac4a430883b3c092d4eca8f946c916422ecab927f52ea42b89a1cd59c254f919b0e85e6535d135a8de20f20b8c12c3b0
0c895fcf6720192de6bf3b9e89ecdbd6596cbcdd8eb28e7c365ecc4ec1ff1460f53fe813d3cc7f5b7f020000ffff0300504b030414000600080000002100a5d6
a7e7c0000000360100000b0000005f72656c732f2e72656c73848fcf6ac3300c87ef85bd83d17d51d2c31825762fa590432fa37d00e1287f68221bdb1bebdb4f
c7060abb0884a4eff7a93dfeae8bf9e194e720169aaa06c3e2433fcb68e1763dbf7f82c985a4a725085b787086a37bdbb55fbc50d1a33ccd311ba548b6309512
0f88d94fbc52ae4264d1c910d24a45db3462247fa791715fd71f989e19e0364cd3f51652d73760ae8fa8c9ffb3c330cc9e4fc17faf2ce545046e37944c69e462
a1a82fe353bd90a865aad41ed0b5b8f9d6fd010000ffff0300504b0304140006000800000021006b799616830000008a0000001c0000007468656d652f746865
6d652f7468656d654d616e616765722e786d6c0ccc4d0ac3201040e17da17790d93763bb284562b2cbaebbf600439c1a41c7a0d29fdbd7e5e38337cedf14d59b
4b0d592c9c070d8a65cd2e88b7f07c2ca71ba8da481cc52c6ce1c715e6e97818c9b48d13df49c873517d23d59085adb5dd20d6b52bd521ef2cdd5eb9246a3d8b
4757e8d3f729e245eb2b260a0238fd010000ffff0300504b03041400060008000000210030dd4329a8060000a41b0000160000007468656d652f7468656d652f
7468656d65312e786d6cec594f6fdb3614bf0fd87720746f6327761a07758ad8b19b2d4d1bc46e871e698996d850a240d2497d1bdae38001c3ba618715d86d87
615b8116d8a5fb34d93a6c1dd0afb0475292c5585e9236d88aad3e2412f9e3fbff1e1fa9abd7eec70c1d1221294fda5efd72cd4324f1794093b0eddd1ef62fad
79482a9c0498f184b4bd2991deb58df7dfbb8ad755446282607d22d771db8b944ad79796a40fc3585ee62949606ecc458c15bc8a702910f808e8c66c69b9565b
5d8a314d3c94e018c8de1a8fa94fd05093f43672e23d06af89927ac06762a049136785c10607758d9053d965021d62d6f6804fc08f86e4bef210c352c144dbab
999fb7b4717509af678b985ab0b6b4ae6f7ed9ba6c4170b06c788a705430adf71bad2b5b057d03606a1ed7ebf5babd7a41cf00b0ef83a6569632cd467faddec9
699640f6719e76b7d6ac355c7c89feca9cccad4ea7d36c65b258a206641f1b73f8b5da6a6373d9c11b90c537e7f08dce66b7bbeae00dc8e257e7f0fd2badd586
8b37a088d1e4600ead1ddaef67d40bc898b3ed4af81ac0d76a197c86826828a24bb318f3442d8ab518dfe3a20f000d6458d104a9694ac6d88728eee2782428d6
0cf03ac1a5193be4cbb921cd0b495fd054b5bd0f530c1931a3f7eaf9f7af9e3f45c70f9e1d3ff8e9f8e1c3e3073f5a42ceaa6d9c84e5552fbffdeccfc71fa33f
9e7ef3f2d117d57859c6fffac327bffcfc793510d26726ce8b2f9ffcf6ecc98baf3efdfdbb4715f04d814765f890c644a29be408edf3181433567125272371be
15c308d3f28acd249438c19a4b05fd9e8a1cf4cd296699771c393ac4b5e01d01e5a30a787d72cf1178108989a2159c77a2d801ee72ce3a5c545a6147f32a9979
3849c26ae66252c6ed637c58c5bb8b13c7bfbd490a75330f4b47f16e441c31f7184e140e494214d273fc80900aedee52ead87597fa824b3e56e82e451d4c2b4d
32a423279a668bb6690c7e9956e90cfe766cb37b077538abd27a8b1cba48c80acc2a841f12e698f13a9e281c57911ce298950d7e03aba84ac8c154f8655c4f2a
f074481847bd804859b5e696007d4b4edfc150b12addbecba6b18b148a1e54d1bc81392f23b7f84137c2715a851dd0242a633f900710a218ed715505dfe56e86
e877f0034e16bafb0e258ebb4faf06b769e888340b103d331115bebc4eb813bf83291b63624a0d1475a756c734f9bbc2cd28546ecbe1e20a3794ca175f3fae90
fb6d2dd99bb07b55e5ccf68942bd0877b23c77b908e8db5f9db7f024d9239010f35bd4bbe2fcae387bfff9e2bc289f2fbe24cfaa301468dd8bd846dbb4ddf1c2
ae7b4c191ba8292337a469bc25ec3d411f06f53a73e224c5292c8de0516732307070a1c0660d125c7d44553488700a4d7bddd3444299910e254ab984c3a219ae
a4adf1d0f82b7bd46cea4388ad1c12ab5d1ed8e1153d9c9f350a3246aad01c6873462b9ac05999ad5cc988826eafc3acae853a33b7ba11cd1445875ba1b236b1
399483c90bd560b0b0263435085a21b0f22a9cf9356b38ec6046026d77eba3dc2dc60b17e92219e180643ed27acffba86e9c94c7ca9c225a0f1b0cfae0788ad5
4adc5a9aec1b703b8b93caec1a0bd8e5de7b132fe5113cf312503b998e2c2927274bd051db6b35979b1ef271daf6c6704e86c73805af4bdd476216c26593af84
0dfb5393d964f9cc9bad5c313709ea70f561ed3ea7b053075221d51696910d0d339585004b34272bff7213cc7a510a5454a3b349b1b206c1f0af490176745d4b
c663e2abb2b34b23da76f6352ba57ca2881844c1111ab189d8c7e07e1daaa04f40255c77988aa05fe06e4e5bdb4cb9c5394bbaf28d98c1d971ccd20867e556a7
689ec9166e0a522183792b8907ba55ca6e943bbf2a26e52f48957218ffcf54d1fb09dc3eac04da033e5c0d0b8c74a6b43d2e54c4a10aa511f5fb021a07533b20
5ae07e17a621a8e082dafc17e450ffb739676998b48643a4daa7211214f623150942f6a02c99e83b85583ddbbb2c4996113211551257a656ec1139246ca86be0
aadedb3d1441a89b6a929501833b197fee7b9641a3503739e57c732a59b1f7da1cf8a73b1f9bcca0945b874d4393dbbf10b1680f66bbaa5d6f96e77b6f59113d
316bb31a795600b3d256d0cad2fe354538e7566b2bd69cc6cbcd5c38f0e2bcc63058344429dc2121fd07f63f2a7c66bf76e80d75c8f7a1b622f878a18941d840
545fb28d07d205d20e8ea071b283369834296bdaac75d256cb37eb0bee740bbe278cad253b8bbfcf69eca23973d939b97891c6ce2cecd8da8e2d343578f6648a
c2d0383fc818c798cf64e52f597c740f1cbd05df0c264c49134cf09d4a60e8a107260f20f92d47b374e32f000000ffff0300504b030414000600080000002100
0dd1909fb60000001b010000270000007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73848f4d0ac2301484f7
8277086f6fd3ba109126dd88d0add40384e4350d363f2451eced0dae2c082e8761be9969bb979dc9136332de3168aa1a083ae995719ac16db8ec8e4052164e89
d93b64b060828e6f37ed1567914b284d262452282e3198720e274a939cd08a54f980ae38a38f56e422a3a641c8bbd048f7757da0f19b017cc524bd62107bd500
1996509affb3fd381a89672f1f165dfe514173d9850528a2c6cce0239baa4c04ca5bbabac4df000000ffff0300504b01022d0014000600080000002100e9de0f
bfff0000001c0200001300000000000000000000000000000000005b436f6e74656e745f54797065735d2e786d6c504b01022d0014000600080000002100a5d6
a7e7c0000000360100000b00000000000000000000000000300100005f72656c732f2e72656c73504b01022d00140006000800000021006b799616830000008a
0000001c00000000000000000000000000190200007468656d652f7468656d652f7468656d654d616e616765722e786d6c504b01022d00140006000800000021
0030dd4329a8060000a41b00001600000000000000000000000000d60200007468656d652f7468656d652f7468656d65312e786d6c504b01022d001400060008
00000021000dd1909fb60000001b0100002700000000000000000000000000b20900007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73504b050600000000050005005d010000ad0a00000000}
{\*\colorschememapping 3c3f786d6c2076657273696f6e3d22312e302220656e636f64696e673d225554462d3822207374616e64616c6f6e653d22796573223f3e0d0a3c613a636c724d
617020786d6c6e733a613d22687474703a2f2f736368656d61732e6f70656e786d6c666f726d6174732e6f72672f64726177696e676d6c2f323030362f6d6169
6e22206267313d226c743122207478313d22646b3122206267323d226c743222207478323d22646b322220616363656e74313d22616363656e74312220616363
656e74323d22616363656e74322220616363656e74333d22616363656e74332220616363656e74343d22616363656e74342220616363656e74353d22616363656e74352220616363656e74363d22616363656e74362220686c696e6b3d22686c696e6b2220666f6c486c696e6b3d22666f6c486c696e6b222f3e}
{\*\latentstyles\lsdstimax267\lsdlockeddef0\lsdsemihiddendef1\lsdunhideuseddef0\lsdqformatdef0\lsdprioritydef99{\lsdlockedexcept \lsdsemihidden0 \lsdqformat1 \lsdpriority0 \lsdlocked0 Normal;\lsdsemihidden0 \lsdqformat1 \lsdlocked0 heading 1;
\lsdsemihidden0 \lsdqformat1 \lsdlocked0 heading 2;\lsdsemihidden0 \lsdqformat1 \lsdlocked0 heading 3;\lsdsemihidden0 \lsdqformat1 \lsdlocked0 heading 4;\lsdsemihidden0 \lsdqformat1 \lsdlocked0 heading 5;\lsdsemihidden0 \lsdqformat1 \lsdlocked0 heading 6;
\lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 7;\lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 8;\lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 9;\lsdunhideused1 \lsdlocked0 index 1;
\lsdunhideused1 \lsdlocked0 index 2;\lsdunhideused1 \lsdlocked0 index 3;\lsdunhideused1 \lsdlocked0 index 4;\lsdunhideused1 \lsdlocked0 index 5;\lsdunhideused1 \lsdlocked0 index 6;\lsdunhideused1 \lsdlocked0 index 7;\lsdunhideused1 \lsdlocked0 index 8;
\lsdunhideused1 \lsdlocked0 index 9;\lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 7;\lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 8;\lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 9;\lsdunhideused1 \lsdlocked0 Normal Indent;
\lsdunhideused1 \lsdlocked0 annotation text;\lsdunhideused1 \lsdlocked0 index heading;\lsdsemihidden0 \lsdqformat1 \lsdlocked0 caption;\lsdunhideused1 \lsdlocked0 table of figures;\lsdunhideused1 \lsdlocked0 envelope address;
\lsdunhideused1 \lsdlocked0 envelope return;\lsdunhideused1 \lsdlocked0 footnote reference;\lsdunhideused1 \lsdlocked0 annotation reference;\lsdunhideused1 \lsdlocked0 line number;\lsdunhideused1 \lsdlocked0 page number;
\lsdunhideused1 \lsdlocked0 table of authorities;\lsdunhideused1 \lsdlocked0 macro;\lsdunhideused1 \lsdlocked0 toa heading;\lsdunhideused1 \lsdlocked0 List Bullet;\lsdunhideused1 \lsdlocked0 List Number;\lsdunhideused1 \lsdlocked0 List 2;
\lsdunhideused1 \lsdlocked0 List 3;\lsdunhideused1 \lsdlocked0 List 4;\lsdunhideused1 \lsdlocked0 List 5;\lsdunhideused1 \lsdlocked0 List Bullet 2;\lsdunhideused1 \lsdlocked0 List Bullet 3;\lsdunhideused1 \lsdlocked0 List Bullet 4;
\lsdunhideused1 \lsdlocked0 List Bullet 5;\lsdunhideused1 \lsdlocked0 List Number 2;\lsdunhideused1 \lsdlocked0 List Number 3;\lsdunhideused1 \lsdlocked0 List Number 4;\lsdunhideused1 \lsdlocked0 List Number 5;
\lsdsemihidden0 \lsdqformat1 \lsdlocked0 Title;\lsdunhideused1 \lsdlocked0 Closing;\lsdunhideused1 \lsdlocked0 Signature;\lsdunhideused1 \lsdlocked0 Body Text;\lsdunhideused1 \lsdlocked0 Body Text Indent;\lsdunhideused1 \lsdlocked0 List Continue;
\lsdunhideused1 \lsdlocked0 List Continue 2;\lsdunhideused1 \lsdlocked0 List Continue 3;\lsdunhideused1 \lsdlocked0 List Continue 4;\lsdunhideused1 \lsdlocked0 List Continue 5;\lsdunhideused1 \lsdlocked0 Message Header;
\lsdsemihidden0 \lsdqformat1 \lsdpriority11 \lsdlocked0 Subtitle;\lsdunhideused1 \lsdlocked0 Salutation;\lsdunhideused1 \lsdlocked0 Date;\lsdunhideused1 \lsdlocked0 Body Text First Indent;\lsdunhideused1 \lsdlocked0 Body Text First Indent 2;
\lsdunhideused1 \lsdlocked0 Note Heading;\lsdunhideused1 \lsdlocked0 Body Text 2;\lsdunhideused1 \lsdlocked0 Body Text 3;\lsdunhideused1 \lsdlocked0 Body Text Indent 2;\lsdunhideused1 \lsdlocked0 Body Text Indent 3;\lsdunhideused1 \lsdlocked0 Block Text;
\lsdunhideused1 \lsdlocked0 Hyperlink;\lsdunhideused1 \lsdlocked0 FollowedHyperlink;\lsdsemihidden0 \lsdqformat1 \lsdpriority22 \lsdlocked0 Strong;\lsdsemihidden0 \lsdqformat1 \lsdpriority20 \lsdlocked0 Emphasis;\lsdunhideused1 \lsdlocked0 Document Map;
\lsdunhideused1 \lsdlocked0 Plain Text;\lsdunhideused1 \lsdlocked0 E-mail Signature;\lsdunhideused1 \lsdlocked0 HTML Top of Form;\lsdunhideused1 \lsdlocked0 HTML Bottom of Form;\lsdunhideused1 \lsdlocked0 Normal (Web);
\lsdunhideused1 \lsdlocked0 HTML Acronym;\lsdunhideused1 \lsdlocked0 HTML Address;\lsdunhideused1 \lsdlocked0 HTML Cite;\lsdunhideused1 \lsdlocked0 HTML Code;\lsdunhideused1 \lsdlocked0 HTML Definition;\lsdunhideused1 \lsdlocked0 HTML Keyboard;
\lsdunhideused1 \lsdlocked0 HTML Preformatted;\lsdunhideused1 \lsdlocked0 HTML Sample;\lsdunhideused1 \lsdlocked0 HTML Typewriter;\lsdunhideused1 \lsdlocked0 HTML Variable;\lsdunhideused1 \lsdlocked0 Normal Table;
\lsdunhideused1 \lsdlocked0 annotation subject;\lsdunhideused1 \lsdlocked0 No List;\lsdunhideused1 \lsdlocked0 Outline List 1;\lsdunhideused1 \lsdlocked0 Outline List 2;\lsdunhideused1 \lsdlocked0 Outline List 3;\lsdunhideused1 \lsdlocked0 Table Simple 1;
\lsdunhideused1 \lsdlocked0 Table Simple 2;\lsdunhideused1 \lsdlocked0 Table Simple 3;\lsdunhideused1 \lsdlocked0 Table Classic 1;\lsdunhideused1 \lsdlocked0 Table Classic 2;\lsdunhideused1 \lsdlocked0 Table Classic 3;
\lsdunhideused1 \lsdlocked0 Table Classic 4;\lsdunhideused1 \lsdlocked0 Table Colorful 1;\lsdunhideused1 \lsdlocked0 Table Colorful 2;\lsdunhideused1 \lsdlocked0 Table Colorful 3;\lsdunhideused1 \lsdlocked0 Table Columns 1;
\lsdunhideused1 \lsdlocked0 Table Columns 2;\lsdunhideused1 \lsdlocked0 Table Columns 3;\lsdunhideused1 \lsdlocked0 Table Columns 4;\lsdunhideused1 \lsdlocked0 Table Columns 5;\lsdunhideused1 \lsdlocked0 Table Grid 1;
\lsdunhideused1 \lsdlocked0 Table Grid 2;\lsdunhideused1 \lsdlocked0 Table Grid 3;\lsdunhideused1 \lsdlocked0 Table Grid 4;\lsdunhideused1 \lsdlocked0 Table Grid 5;\lsdunhideused1 \lsdlocked0 Table Grid 6;\lsdunhideused1 \lsdlocked0 Table Grid 7;
\lsdunhideused1 \lsdlocked0 Table Grid 8;\lsdunhideused1 \lsdlocked0 Table List 1;\lsdunhideused1 \lsdlocked0 Table List 2;\lsdunhideused1 \lsdlocked0 Table List 3;\lsdunhideused1 \lsdlocked0 Table List 4;\lsdunhideused1 \lsdlocked0 Table List 5;
\lsdunhideused1 \lsdlocked0 Table List 6;\lsdunhideused1 \lsdlocked0 Table List 7;\lsdunhideused1 \lsdlocked0 Table List 8;\lsdunhideused1 \lsdlocked0 Table 3D effects 1;\lsdunhideused1 \lsdlocked0 Table 3D effects 2;
\lsdunhideused1 \lsdlocked0 Table 3D effects 3;\lsdunhideused1 \lsdlocked0 Table Contemporary;\lsdunhideused1 \lsdlocked0 Table Elegant;\lsdunhideused1 \lsdlocked0 Table Professional;\lsdunhideused1 \lsdlocked0 Table Subtle 1;
\lsdunhideused1 \lsdlocked0 Table Subtle 2;\lsdunhideused1 \lsdlocked0 Table Web 1;\lsdunhideused1 \lsdlocked0 Table Web 2;\lsdunhideused1 \lsdlocked0 Table Web 3;\lsdunhideused1 \lsdlocked0 Balloon Text;
\lsdsemihidden0 \lsdpriority59 \lsdlocked0 Table Grid;\lsdunhideused1 \lsdlocked0 Table Theme;\lsdsemihidden0 \lsdqformat1 \lsdpriority1 \lsdlocked0 No Spacing;\lsdsemihidden0 \lsdpriority60 \lsdlocked0 Light Shading;
\lsdsemihidden0 \lsdpriority61 \lsdlocked0 Light List;\lsdsemihidden0 \lsdpriority62 \lsdlocked0 Light Grid;\lsdsemihidden0 \lsdpriority63 \lsdlocked0 Medium Shading 1;\lsdsemihidden0 \lsdpriority64 \lsdlocked0 Medium Shading 2;
\lsdsemihidden0 \lsdpriority65 \lsdlocked0 Medium List 1;\lsdsemihidden0 \lsdpriority66 \lsdlocked0 Medium List 2;\lsdsemihidden0 \lsdpriority67 \lsdlocked0 Medium Grid 1;\lsdsemihidden0 \lsdpriority68 \lsdlocked0 Medium Grid 2;
\lsdsemihidden0 \lsdpriority69 \lsdlocked0 Medium Grid 3;\lsdsemihidden0 \lsdpriority70 \lsdlocked0 Dark List;\lsdsemihidden0 \lsdpriority71 \lsdlocked0 Colorful Shading;\lsdsemihidden0 \lsdpriority72 \lsdlocked0 Colorful List;
\lsdsemihidden0 \lsdpriority73 \lsdlocked0 Colorful Grid;\lsdsemihidden0 \lsdpriority60 \lsdlocked0 Light Shading Accent 1;\lsdsemihidden0 \lsdpriority61 \lsdlocked0 Light List Accent 1;\lsdsemihidden0 \lsdpriority62 \lsdlocked0 Light Grid Accent 1;
\lsdsemihidden0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 1;\lsdsemihidden0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 1;\lsdsemihidden0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 1;
\lsdsemihidden0 \lsdqformat1 \lsdpriority34 \lsdlocked0 List Paragraph;\lsdsemihidden0 \lsdqformat1 \lsdlocked0 Quote;\lsdsemihidden0 \lsdqformat1 \lsdpriority30 \lsdlocked0 Intense Quote;\lsdsemihidden0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 1;
\lsdsemihidden0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 1;\lsdsemihidden0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 1;\lsdsemihidden0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 1;
\lsdsemihidden0 \lsdpriority70 \lsdlocked0 Dark List Accent 1;\lsdsemihidden0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 1;\lsdsemihidden0 \lsdpriority72 \lsdlocked0 Colorful List Accent 1;
\lsdsemihidden0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 1;\lsdsemihidden0 \lsdpriority60 \lsdlocked0 Light Shading Accent 2;\lsdsemihidden0 \lsdpriority61 \lsdlocked0 Light List Accent 2;
\lsdsemihidden0 \lsdpriority62 \lsdlocked0 Light Grid Accent 2;\lsdsemihidden0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 2;\lsdsemihidden0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 2;
\lsdsemihidden0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 2;\lsdsemihidden0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 2;\lsdsemihidden0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 2;
\lsdsemihidden0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 2;\lsdsemihidden0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 2;\lsdsemihidden0 \lsdpriority70 \lsdlocked0 Dark List Accent 2;
\lsdsemihidden0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 2;\lsdsemihidden0 \lsdpriority72 \lsdlocked0 Colorful List Accent 2;\lsdsemihidden0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 2;
\lsdsemihidden0 \lsdpriority60 \lsdlocked0 Light Shading Accent 3;\lsdsemihidden0 \lsdpriority61 \lsdlocked0 Light List Accent 3;\lsdsemihidden0 \lsdpriority62 \lsdlocked0 Light Grid Accent 3;
\lsdsemihidden0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 3;\lsdsemihidden0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 3;\lsdsemihidden0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 3;
\lsdsemihidden0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 3;\lsdsemihidden0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 3;\lsdsemihidden0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 3;
\lsdsemihidden0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 3;\lsdsemihidden0 \lsdpriority70 \lsdlocked0 Dark List Accent 3;\lsdsemihidden0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 3;
\lsdsemihidden0 \lsdpriority72 \lsdlocked0 Colorful List Accent 3;\lsdsemihidden0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 3;\lsdsemihidden0 \lsdpriority60 \lsdlocked0 Light Shading Accent 4;
\lsdsemihidden0 \lsdpriority61 \lsdlocked0 Light List Accent 4;\lsdsemihidden0 \lsdpriority62 \lsdlocked0 Light Grid Accent 4;\lsdsemihidden0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 4;
\lsdsemihidden0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 4;\lsdsemihidden0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 4;\lsdsemihidden0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 4;
\lsdsemihidden0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 4;\lsdsemihidden0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 4;\lsdsemihidden0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 4;
\lsdsemihidden0 \lsdpriority70 \lsdlocked0 Dark List Accent 4;\lsdsemihidden0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 4;\lsdsemihidden0 \lsdpriority72 \lsdlocked0 Colorful List Accent 4;
\lsdsemihidden0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 4;\lsdsemihidden0 \lsdpriority60 \lsdlocked0 Light Shading Accent 5;\lsdsemihidden0 \lsdpriority61 \lsdlocked0 Light List Accent 5;
\lsdsemihidden0 \lsdpriority62 \lsdlocked0 Light Grid Accent 5;\lsdsemihidden0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 5;\lsdsemihidden0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 5;
\lsdsemihidden0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 5;\lsdsemihidden0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 5;\lsdsemihidden0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 5;
\lsdsemihidden0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 5;\lsdsemihidden0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 5;\lsdsemihidden0 \lsdpriority70 \lsdlocked0 Dark List Accent 5;
\lsdsemihidden0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 5;\lsdsemihidden0 \lsdpriority72 \lsdlocked0 Colorful List Accent 5;\lsdsemihidden0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 5;
\lsdsemihidden0 \lsdpriority60 \lsdlocked0 Light Shading Accent 6;\lsdsemihidden0 \lsdpriority61 \lsdlocked0 Light List Accent 6;\lsdsemihidden0 \lsdpriority62 \lsdlocked0 Light Grid Accent 6;
\lsdsemihidden0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 6;\lsdsemihidden0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 6;\lsdsemihidden0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 6;
\lsdsemihidden0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 6;\lsdsemihidden0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 6;\lsdsemihidden0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 6;
\lsdsemihidden0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 6;\lsdsemihidden0 \lsdpriority70 \lsdlocked0 Dark List Accent 6;\lsdsemihidden0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 6;
\lsdsemihidden0 \lsdpriority72 \lsdlocked0 Colorful List Accent 6;\lsdsemihidden0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 6;\lsdsemihidden0 \lsdqformat1 \lsdpriority19 \lsdlocked0 Subtle Emphasis;
\lsdsemihidden0 \lsdqformat1 \lsdpriority21 \lsdlocked0 Intense Emphasis;\lsdsemihidden0 \lsdqformat1 \lsdpriority31 \lsdlocked0 Subtle Reference;\lsdsemihidden0 \lsdqformat1 \lsdpriority32 \lsdlocked0 Intense Reference;
\lsdsemihidden0 \lsdqformat1 \lsdpriority33 \lsdlocked0 Book Title;\lsdunhideused1 \lsdpriority37 \lsdlocked0 Bibliography;\lsdunhideused1 \lsdqformat1 \lsdpriority39 \lsdlocked0 TOC Heading;}}{\*\datastore 010500000200000018000000
4d73786d6c322e534158584d4c5265616465722e362e3000000000000000000000060000
d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff090006000000000000000000000001000000010000000000000000100000feffffff00000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffdfffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff52006f006f007400200045006e00740072007900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000500ffffffffffffffffffffffff0c6ad98892f1d411a65f0040963251e500000000000000000000000010d6
677a7b2fcc01feffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000105000000000000}}